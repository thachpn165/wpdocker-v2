import time
import os
from core.backend.modules.website.website_utils import get_site_config
from core.backend.utils.debug import log_call, error
from rich.live import Live
from rich.panel import Panel
from rich.text import Text
from rich.align import Align

@log_call
def watch_logs_website(domain: str, log_type: str):


    site_config = get_site_config(domain)
    if not site_config or not site_config.logs:
        error(f"‚ùå Kh√¥ng t√¨m th·∫•y logs c·ªßa website {domain}.")
        return

    log_path = getattr(site_config.logs, log_type, None)
    if not log_path or not os.path.isfile(log_path):
        error(f"‚ùå Kh√¥ng t√¨m th·∫•y log {log_type} t·∫°i {log_path}.")
        return

    countdown = 30
    with open(log_path, "r") as f:
        f.seek(0, os.SEEK_END)  # ch·ªâ theo d√µi log m·ªõi t·ª´ sau th·ªùi ƒëi·ªÉm n√†y

        with Live(refresh_per_second=4) as live:
            buffer = []
            while countdown > 0:
                try:
                    new_lines = f.readlines()
                    if new_lines:
                        buffer.extend(new_lines)
                        buffer = buffer[-20:]  # gi·ªØ t·ªëi ƒëa 20 d√≤ng m·ªõi nh·∫•t
                    content = Text("".join(buffer), style="white")
                    header = Text(f"‚è±Ô∏è C√≤n l·∫°i: {countdown}s", style="bold green")
                    panel = Panel.fit(
                        Align.center(content, vertical="top"),
                        title=f"üìÑ Log: {log_type} | {domain}",
                        subtitle=header,
                        border_style="cyan"
                    )
                    live.update(panel)

                    time.sleep(1)
                    countdown -= 1
                except KeyboardInterrupt:
                    break
    return True