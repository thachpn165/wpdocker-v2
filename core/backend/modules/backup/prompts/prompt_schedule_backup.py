"""
Module for handling automated backup scheduling for websites.
"""
from questionary import select, confirm, text
import os
import time
from datetime import datetime
from dataclasses import asdict

from core.backend.utils.debug import log_call, info, error, warn, debug, success
from core.backend.abc.prompt_base import PromptBase
from core.backend.modules.website.website_utils import select_website, get_site_config, set_site_config
from core.backend.models.config import BackupSchedule, CloudConfig, SiteBackup
from core.backend.modules.cron.models.cron_job import CronJob
from core.backend.modules.cron.cron_manager import CronManager


class ScheduleBackupPrompt(PromptBase):
    """
    Class for handling automated backup scheduling prompt for websites.
    
    Implements the abstract PromptBase class with methods:
    - _collect_inputs: Collects information about the backup schedule
    - _process: Performs creation or update of the schedule
    - _show_results: Displays scheduling results
    """
    
    def _collect_inputs(self):
        """
        Thu th·∫≠p th√¥ng tin v·ªÅ l·ªãch tr√¨nh backup t·ª´ ng∆∞·ªùi d√πng.
        
        Returns:
            dict: Ch·ª©a th√¥ng tin c·∫•u h√¨nh l·ªãch tr√¨nh ho·∫∑c None n·∫øu b·ªã h·ªßy
        """
        # Ch·ªçn website ƒë·ªÉ l√™n l·ªãch backup
        domain = select_website("üåê Ch·ªçn website ƒë·ªÉ l√™n l·ªãch backup t·ª± ƒë·ªông:")
        
        if not domain:
            # Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong h√†m select_website
            return None
        
        # Ki·ªÉm tra l·ªãch tr√¨nh hi·ªán t·∫°i
        site_config = get_site_config(domain)
        has_existing_schedule = (site_config and site_config.backup and
                                site_config.backup.schedule and
                                site_config.backup.schedule.enabled)
        
        # H√†nh ƒë·ªông d·ª±a tr√™n tr·∫°ng th√°i hi·ªán t·∫°i
        if has_existing_schedule:
            # Hi·ªÉn th·ªã th√¥ng tin l·ªãch tr√¨nh hi·ªán t·∫°i
            current_schedule = site_config.backup.schedule
            info(f"‚è±Ô∏è L·ªãch tr√¨nh hi·ªán t·∫°i: {self._format_schedule(current_schedule)}")
            
            # H·ªèi ng∆∞·ªùi d√πng mu·ªën c·∫≠p nh·∫≠t hay x√≥a l·ªãch tr√¨nh
            action = select(
                "üîç B·∫°n mu·ªën l√†m g√¨ v·ªõi l·ªãch tr√¨nh hi·ªán t·∫°i?",
                choices=[
                    "C·∫≠p nh·∫≠t l·ªãch tr√¨nh",
                    "V√¥ hi·ªáu h√≥a l·ªãch tr√¨nh",
                    "X√≥a l·ªãch tr√¨nh",
                    "Quay l·∫°i"
                ]
            ).ask()
            
            if not action or action == "Quay l·∫°i":
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
                
            if action == "X√≥a l·ªãch tr√¨nh":
                if confirm("‚ö†Ô∏è X√°c nh·∫≠n x√≥a l·ªãch tr√¨nh backup t·ª± ƒë·ªông?").ask():
                    return {
                        "domain": domain,
                        "action": "delete"
                    }
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
                
            if action == "V√¥ hi·ªáu h√≥a l·ªãch tr√¨nh":
                return {
                    "domain": domain,
                    "action": "disable"
                }
                
            # N·∫øu ch·ªçn c·∫≠p nh·∫≠t, ti·∫øp t·ª•c v·ªõi th√¥ng tin hi·ªán t·∫°i
            current_values = {
                "schedule_type": current_schedule.schedule_type,
                "hour": current_schedule.hour,
                "minute": current_schedule.minute,
                "day_of_week": current_schedule.day_of_week,
                "day_of_month": current_schedule.day_of_month,
                "retention_count": current_schedule.retention_count,
                "cloud_sync": current_schedule.cloud_sync
            }
        else:
            # T·∫°o m·ªõi
            action = "create"
            current_values = {
                "schedule_type": "daily",
                "hour": 1,
                "minute": 0,
                "day_of_week": None,
                "day_of_month": None,
                "retention_count": 3,
                "cloud_sync": False
            }
        
        # Thu th·∫≠p th√¥ng tin l·ªãch tr√¨nh
        schedule_type = select(
            "üîÑ Ch·ªçn t·∫ßn su·∫•t backup:",
            choices=[
                "H√†ng ng√†y",
                "H√†ng tu·∫ßn",
                "H√†ng th√°ng"
            ],
            default="H√†ng ng√†y" if current_values["schedule_type"] == "daily" else 
                    "H√†ng tu·∫ßn" if current_values["schedule_type"] == "weekly" else
                    "H√†ng th√°ng"
        ).ask()
        
        if not schedule_type:
            info("ƒê√£ hu·ª∑ thao t√°c.")
            return None
        
        # Ch·ªçn gi·ªù trong ng√†y
        hour_choices = [f"{h:02d}" for h in range(24)]
        hour = select(
            "üïí Ch·ªçn gi·ªù th·ª±c hi·ªán backup (0-23):",
            choices=hour_choices,
            default=f"{current_values['hour']:02d}"
        ).ask()
        
        if not hour:
            info("ƒê√£ hu·ª∑ thao t√°c.")
            return None
        
        hour = int(hour)
        
        # Ch·ªçn ph√∫t
        minute_choices = ["00", "15", "30", "45"]
        minute = select(
            "üïí Ch·ªçn ph√∫t (0-59):",
            choices=minute_choices,
            default=f"{current_values['minute']:02d}" if current_values['minute'] in [0, 15, 30, 45] else "00"
        ).ask()
        
        if not minute:
            info("ƒê√£ hu·ª∑ thao t√°c.")
            return None
        
        minute = int(minute)
        
        # Th√¥ng tin b·ªï sung d·ª±a tr√™n lo·∫°i l·ªãch tr√¨nh
        day_of_week = None
        day_of_month = None
        
        if schedule_type == "H√†ng tu·∫ßn":
            days = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
            default_day = days[current_values["day_of_week"]] if current_values["day_of_week"] is not None else "Th·ª© Hai"
            
            selected_day = select(
                "üìÖ Ch·ªçn ng√†y trong tu·∫ßn:",
                choices=days,
                default=default_day
            ).ask()
            
            if not selected_day:
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            day_of_week = days.index(selected_day)
            
        elif schedule_type == "H√†ng th√°ng":
            day_choices = [str(d) for d in range(1, 32)]
            default_day = str(current_values["day_of_month"]) if current_values["day_of_month"] is not None else "1"
            
            selected_day = select(
                "üìÖ Ch·ªçn ng√†y trong th√°ng (1-31):",
                choices=day_choices,
                default=default_day
            ).ask()
            
            if not selected_day:
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            day_of_month = int(selected_day)
        
        # Ch·ªçn s·ªë l∆∞·ª£ng b·∫£n backup gi·ªØ l·∫°i
        retention_choices = ["1", "3", "5", "10", "T·∫•t c·∫£"]
        default_retention = "T·∫•t c·∫£" if current_values["retention_count"] == 0 else str(current_values["retention_count"])
        
        retention = select(
            "üî¢ S·ªë l∆∞·ª£ng b·∫£n backup g·∫ßn nh·∫•t mu·ªën gi·ªØ l·∫°i:",
            choices=retention_choices,
            default=default_retention
        ).ask()
        
        if not retention:
            info("ƒê√£ hu·ª∑ thao t√°c.")
            return None
        
        retention_count = 0 if retention == "T·∫•t c·∫£" else int(retention)
        
        # C·∫•u h√¨nh ƒë·ªìng b·ªô l√™n cloud
        cloud_sync = confirm(
            "‚òÅÔ∏è B·∫°n c√≥ mu·ªën ƒë·ªìng b·ªô backup l√™n cloud storage kh√¥ng?",
            default=current_values["cloud_sync"]
        ).ask()
        
        # N·∫øu b·∫≠t ƒë·ªìng b·ªô cloud, thu th·∫≠p th√¥ng tin
        cloud_config = None
        if cloud_sync:
            # L·∫•y c·∫•u h√¨nh cloud hi·ªán t·∫°i n·∫øu c√≥
            current_cloud = None
            if site_config and site_config.backup and site_config.backup.cloud_config:
                current_cloud = site_config.backup.cloud_config
            
            # Nh·∫≠p t√™n remote rclone
            remote_name = text(
                "Nh·∫≠p t√™n remote rclone:",
                default=current_cloud.remote_name if current_cloud else ""
            ).ask()
            
            if not remote_name:
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            # Nh·∫≠p ƒë∆∞·ªùng d·∫´n trong remote
            remote_path = text(
                "Nh·∫≠p ƒë∆∞·ªùng d·∫´n trong remote:",
                default=current_cloud.remote_path if current_cloud else f"backup/{domain}"
            ).ask()
            
            if not remote_path:
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            cloud_config = {
                "provider": "rclone",
                "remote_name": remote_name,
                "remote_path": remote_path,
                "enabled": True
            }
        
        # Chuy·ªÉn ƒë·ªïi lo·∫°i l·ªãch tr√¨nh
        schedule_type_map = {
            "H√†ng ng√†y": "daily",
            "H√†ng tu·∫ßn": "weekly",
            "H√†ng th√°ng": "monthly"
        }
        
        # X√°c nh·∫≠n c·∫•u h√¨nh
        if not confirm("‚ö†Ô∏è X√°c nh·∫≠n √°p d·ª•ng l·ªãch tr√¨nh backup t·ª± ƒë·ªông?").ask():
            info("ƒê√£ hu·ª∑ thao t√°c.")
            return None
        
        # Tr·∫£ v·ªÅ th√¥ng tin ƒë√£ thu th·∫≠p
        return {
            "domain": domain,
            "action": action,
            "schedule": {
                "schedule_type": schedule_type_map[schedule_type],
                "hour": hour,
                "minute": minute,
                "day_of_week": day_of_week,
                "day_of_month": day_of_month,
                "retention_count": retention_count,
                "cloud_sync": cloud_sync
            },
            "cloud_config": cloud_config
        }
    
    def _process(self, inputs):
        """
        Th·ª±c hi·ªán vi·ªác t·∫°o, c·∫≠p nh·∫≠t ho·∫∑c x√≥a l·ªãch tr√¨nh backup.
        
        Args:
            inputs: Dict ch·ª©a th√¥ng tin v·ªÅ l·ªãch tr√¨nh backup
            
        Returns:
            dict: K·∫øt qu·∫£ x·ª≠ l√Ω
        """
        domain = inputs["domain"]
        action = inputs["action"]
        
        # L·∫•y c·∫•u h√¨nh website
        site_config = get_site_config(domain)
        if not site_config:
            error(f"‚ùå Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh cho website {domain}.")
            return None
        
        # ƒê·∫£m b·∫£o c√≥ ph·∫ßn backup trong c·∫•u h√¨nh
        if not site_config.backup:
            site_config.backup = SiteBackup()
        
        # Kh·ªüi t·∫°o CronManager
        cron_manager = CronManager()
        
        # X·ª≠ l√Ω theo h√†nh ƒë·ªông
        if action == "delete":
            # X√≥a c√¥ng vi·ªác cron n·∫øu c√≥
            if site_config.backup.job_id:
                cron_manager.remove_job(site_config.backup.job_id)
            
            # X√≥a c·∫•u h√¨nh l·ªãch tr√¨nh
            site_config.backup.schedule = None
            site_config.backup.job_id = None
            
            # L∆∞u c·∫•u h√¨nh m·ªõi
            set_site_config(domain, site_config)
            
            return {
                "domain": domain,
                "action": "delete",
                "success": True
            }
        
        elif action == "disable":
            # V√¥ hi·ªáu h√≥a c√¥ng vi·ªác cron
            if site_config.backup.job_id:
                # Use the disable_job method which now handles versions safely
                cron_manager.disable_job(site_config.backup.job_id)
            
            # C·∫≠p nh·∫≠t c·∫•u h√¨nh
            if site_config.backup.schedule:
                site_config.backup.schedule.enabled = False
                set_site_config(domain, site_config)
            
            return {
                "domain": domain,
                "action": "disable",
                "success": True
            }
        
        else:  # create or update
            # T·∫°o ƒë·ªëi t∆∞·ª£ng BackupSchedule
            schedule_data = inputs["schedule"]
            schedule = BackupSchedule(
                enabled=True,
                schedule_type=schedule_data["schedule_type"],
                hour=schedule_data["hour"],
                minute=schedule_data["minute"],
                day_of_week=schedule_data["day_of_week"],
                day_of_month=schedule_data["day_of_month"],
                retention_count=schedule_data["retention_count"],
                cloud_sync=schedule_data["cloud_sync"]
            )
            
            # C·∫≠p nh·∫≠t ho·∫∑c t·∫°o c·∫•u h√¨nh cloud n·∫øu c·∫ßn
            cloud_config = inputs.get("cloud_config")
            if cloud_config:
                site_config.backup.cloud_config = CloudConfig(
                    provider=cloud_config["provider"],
                    remote_name=cloud_config["remote_name"],
                    remote_path=cloud_config["remote_path"],
                    enabled=cloud_config["enabled"]
                )
            elif schedule.cloud_sync and not site_config.backup.cloud_config:
                # T·∫°o c·∫•u h√¨nh cloud m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
                site_config.backup.cloud_config = CloudConfig(
                    remote_path=f"backup/{domain}"
                )
            
            # C·∫≠p nh·∫≠t l·ªãch tr√¨nh
            site_config.backup.schedule = schedule
            
            # T·∫°o bi·ªÉu th·ª©c cron
            cron_expr = self._create_cron_expression(schedule)
            
            # Tham s·ªë cho c√¥ng vi·ªác
            job_params = {
                "retention_count": schedule.retention_count,
                "cloud_sync": schedule.cloud_sync
            }
            
            if site_config.backup.cloud_config and schedule.cloud_sync:
                job_params["cloud_config"] = asdict(site_config.backup.cloud_config)
            
            # T·∫°o ho·∫∑c c·∫≠p nh·∫≠t c√¥ng vi·ªác cron
            if site_config.backup.job_id:
                # C·∫≠p nh·∫≠t c√¥ng vi·ªác hi·ªán c√≥
                job = cron_manager.get_job(site_config.backup.job_id)
                if job:
                    # C·∫≠p nh·∫≠t th√¥ng tin
                    job.schedule = cron_expr
                    job.parameters = job_params
                    job.enabled = True
                    cron_manager.update_job(job)
                else:
                    # C√¥ng vi·ªác kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi
                    job = CronJob(
                        id=f"backup_{domain}_{int(time.time())}",
                        job_type="backup",
                        schedule=cron_expr,
                        target_id=domain,
                        parameters=job_params,
                        enabled=True,
                        created_at=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    )
                    cron_manager.add_job(job)
                    site_config.backup.job_id = job.id
            else:
                # T·∫°o c√¥ng vi·ªác m·ªõi
                job = CronJob(
                    id=f"backup_{domain}_{int(time.time())}",
                    job_type="backup",
                    schedule=cron_expr,
                    target_id=domain,
                    parameters=job_params,
                    enabled=True,
                    created_at=datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                )
                cron_manager.add_job(job)
                site_config.backup.job_id = job.id
            
            # L∆∞u c·∫•u h√¨nh m·ªõi
            set_site_config(domain, site_config)
            
            return {
                "domain": domain,
                "action": "create_or_update",
                "success": True,
                "schedule": schedule,
                "job_id": site_config.backup.job_id,
                "cron_expression": cron_expr
            }
    
    def _show_results(self):
        """
        Hi·ªÉn th·ªã k·∫øt qu·∫£ l√™n l·ªãch backup.
        
        S·ª≠ d·ª•ng self.result ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£.
        """
        if not self.result:
            return
        
        domain = self.result["domain"]
        action = self.result["action"]
        success = self.result.get("success", False)
        
        if not success:
            error(f"‚ùå Kh√¥ng th·ªÉ c·∫•u h√¨nh l·ªãch tr√¨nh backup cho {domain}.")
            return
        
        if action == "delete":
            success(f"‚úÖ ƒê√£ x√≥a l·ªãch tr√¨nh backup t·ª± ƒë·ªông cho website {domain}.")
            
        elif action == "disable":
            success(f"‚úÖ ƒê√£ v√¥ hi·ªáu h√≥a l·ªãch tr√¨nh backup t·ª± ƒë·ªông cho website {domain}.")
            
        elif action == "create_or_update":
            schedule = self.result["schedule"]
            job_id = self.result["job_id"]
            cron_expr = self.result["cron_expression"]
            
            success(f"‚úÖ ƒê√£ c·∫•u h√¨nh l·ªãch tr√¨nh backup t·ª± ƒë·ªông cho website {domain}.")
            info(f"‚è±Ô∏è L·ªãch tr√¨nh: {self._format_schedule(schedule)}")
            info(f"üîÑ Bi·ªÉu th·ª©c Cron: {cron_expr}")
            info(f"üîë Job ID: {job_id}")
            
            if schedule.cloud_sync:
                info("‚òÅÔ∏è ƒê·ªìng b·ªô l√™n cloud storage: B·∫≠t")
            else:
                info("‚òÅÔ∏è ƒê·ªìng b·ªô l√™n cloud storage: T·∫Øt")
            
            retention = "T·∫•t c·∫£" if schedule.retention_count == 0 else str(schedule.retention_count)
            info(f"üî¢ S·ªë l∆∞·ª£ng backup gi·ªØ l·∫°i: {retention}")
    
    def _format_schedule(self, schedule):
        """
        ƒê·ªãnh d·∫°ng l·ªãch tr√¨nh ƒë·ªÉ hi·ªÉn th·ªã.
        
        Args:
            schedule: ƒê·ªëi t∆∞·ª£ng BackupSchedule
            
        Returns:
            str: Chu·ªói m√¥ t·∫£ l·ªãch tr√¨nh
        """
        if not schedule:
            return "Kh√¥ng c√≥"
        
        hour_min = f"{schedule.hour:02d}:{schedule.minute:02d}"
        
        if schedule.schedule_type == "daily":
            result = f"H√†ng ng√†y l√∫c {hour_min}"
        elif schedule.schedule_type == "weekly" and schedule.day_of_week is not None:
            days = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
            day_name = days[schedule.day_of_week]
            result = f"{day_name} h√†ng tu·∫ßn l√∫c {hour_min}"
        elif schedule.schedule_type == "monthly" and schedule.day_of_month is not None:
            result = f"Ng√†y {schedule.day_of_month} h√†ng th√°ng l√∫c {hour_min}"
        else:
            result = f"L·ªãch tr√¨nh kh√¥ng h·ª£p l·ªá"
        
        if not schedule.enabled:
            result += " (ƒë√£ v√¥ hi·ªáu h√≥a)"
        
        return result
    
    def _create_cron_expression(self, schedule):
        """
        T·∫°o bi·ªÉu th·ª©c cron t·ª´ c·∫•u h√¨nh l·ªãch tr√¨nh.
        
        Args:
            schedule: ƒê·ªëi t∆∞·ª£ng BackupSchedule
            
        Returns:
            str: Bi·ªÉu th·ª©c cron (VD: "0 2 * * *")
        """
        minute = schedule.minute
        hour = schedule.hour
        day_of_month = "*"
        month = "*"
        day_of_week = "*"
        
        if schedule.schedule_type == "weekly" and schedule.day_of_week is not None:
            day_of_week = str(schedule.day_of_week)
        
        if schedule.schedule_type == "monthly" and schedule.day_of_month is not None:
            day_of_month = str(schedule.day_of_month)
        
        return f"{minute} {hour} {day_of_month} {month} {day_of_week}"


# H√†m ti·ªán √≠ch ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©
@log_call
def prompt_schedule_backup():
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ l√™n l·ªãch backup t·ª± ƒë·ªông.
    Duy tr√¨ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©.
    
    Returns:
        K·∫øt qu·∫£ t·ª´ qu√° tr√¨nh l√™n l·ªãch backup ho·∫∑c None n·∫øu b·ªã h·ªßy
    """
    prompt = ScheduleBackupPrompt()
    return prompt.run()