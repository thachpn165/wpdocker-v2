"""
Module for handling automated backup scheduling for websites.
"""
from questionary import select, confirm, text
import os
import time
from datetime import datetime
from dataclasses import asdict

from core.backend.utils.debug import log_call, info, error, warn, debug, success
from core.backend.abc.prompt_base import PromptBase
from core.backend.modules.website.website_utils import select_website, get_site_config
from core.backend.models.config import BackupSchedule, CloudConfig, SiteBackup
from core.backend.modules.backup.backup_manager import BackupManager


class ScheduleBackupPrompt(PromptBase):
    """
    Class for handling automated backup scheduling prompt for websites.
    
    Implements the abstract PromptBase class with methods:
    - _collect_inputs: Collects information about the backup schedule
    - _process: Performs creation or update of the schedule
    - _show_results: Displays scheduling results
    """
    
    def _collect_inputs(self):
        """
        Thu th·∫≠p th√¥ng tin v·ªÅ l·ªãch tr√¨nh backup t·ª´ ng∆∞·ªùi d√πng.
        
        Returns:
            dict: Ch·ª©a th√¥ng tin c·∫•u h√¨nh l·ªãch tr√¨nh ho·∫∑c None n·∫øu b·ªã h·ªßy
        """
        # Ch·ªçn website ƒë·ªÉ l√™n l·ªãch backup
        domain = select_website("üåê Ch·ªçn website ƒë·ªÉ l√™n l·ªãch backup t·ª± ƒë·ªông:")
        
        if not domain:
            # Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong h√†m select_website
            return None
        
        # Kh·ªüi t·∫°o BackupManager
        backup_manager = BackupManager()
        
        # Ki·ªÉm tra l·ªãch tr√¨nh hi·ªán t·∫°i
        site_config = get_site_config(domain)
        has_existing_schedule = (site_config and site_config.backup and
                                site_config.backup.schedule and
                                site_config.backup.schedule.enabled)
        
        # L·∫•y danh s√°ch storage providers
        storage_providers = backup_manager.get_available_providers()
        
        if not storage_providers:
            error("‚ùå Kh√¥ng t√¨m th·∫•y n∆°i l∆∞u tr·ªØ backup n√†o.")
            return None
        
        # H√†nh ƒë·ªông d·ª±a tr√™n tr·∫°ng th√°i hi·ªán t·∫°i
        if has_existing_schedule:
            # Hi·ªÉn th·ªã th√¥ng tin l·ªãch tr√¨nh hi·ªán t·∫°i
            current_schedule = site_config.backup.schedule
            current_cloud = site_config.backup.cloud_config
            
            info(f"‚è∞ L·ªãch tr√¨nh backup hi·ªán t·∫°i cho {domain}:")
            
            # Hi·ªÉn th·ªã t·∫ßn su·∫•t
            schedule_type = current_schedule.schedule_type
            hour = current_schedule.hour
            minute = current_schedule.minute
            
            if schedule_type == "daily":
                info(f"  H√†ng ng√†y l√∫c {hour:02d}:{minute:02d}")
            elif schedule_type == "weekly":
                day = current_schedule.day_of_week
                day_names = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
                day_name = day_names[day] if 0 <= day < len(day_names) else f"ng√†y {day}"
                info(f"  H√†ng tu·∫ßn v√†o {day_name} l√∫c {hour:02d}:{minute:02d}")
            elif schedule_type == "monthly":
                day = current_schedule.day_of_month
                info(f"  H√†ng th√°ng v√†o ng√†y {day} l√∫c {hour:02d}:{minute:02d}")
            
            # Hi·ªÉn th·ªã s·ªë b·∫£n backup l∆∞u gi·ªØ
            if current_schedule.retention_count:
                info(f"  Gi·ªØ l·∫°i {current_schedule.retention_count} b·∫£n backup g·∫ßn nh·∫•t")
            
            # Hi·ªÉn th·ªã n∆°i l∆∞u tr·ªØ
            if current_cloud and current_cloud.enabled:
                provider = current_cloud.provider
                remote = current_cloud.remote_name
                info(f"  L∆∞u tr·ªØ ƒë√°m m√¢y: {provider} ({remote})")
            else:
                info("  L∆∞u tr·ªØ: local")
            
            # H·ªèi ng∆∞·ªùi d√πng mu·ªën l√†m g√¨ v·ªõi l·ªãch tr√¨nh
            action = select(
                "üîç B·∫°n mu·ªën l√†m g√¨ v·ªõi l·ªãch tr√¨nh backup hi·ªán t·∫°i?",
                choices=[
                    "Ch·ªânh s·ª≠a l·ªãch tr√¨nh",
                    "V√¥ hi·ªáu h√≥a l·ªãch tr√¨nh",
                    "Quay l·∫°i"
                ]
            ).ask()
            
            if not action or action == "Quay l·∫°i":
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            if action == "V√¥ hi·ªáu h√≥a l·ªãch tr√¨nh":
                return {
                    "domain": domain,
                    "action": "disable",
                    "config": None
                }
            
            # M·∫∑c ƒë·ªãnh provider l√† local n·∫øu kh√¥ng c√≥ c·∫•u h√¨nh cloud ho·∫∑c cloud b·ªã t·∫Øt
            provider = "local"
            if current_cloud and current_cloud.enabled and current_cloud.remote_name:
                provider = f"rclone:{current_cloud.remote_name}"
            
            # N·∫øu ch·ªçn c·∫≠p nh·∫≠t, ti·∫øp t·ª•c v·ªõi tu·ª≥ ch·ªçn
            schedule_type_mapping = {
                "daily": "H√†ng ng√†y",
                "weekly": "H√†ng tu·∫ßn",
                "monthly": "H√†ng th√°ng"
            }
            
            # Ch·ªçn t·∫ßn su·∫•t backup
            selected_schedule_type = select(
                "üîÑ Ch·ªçn t·∫ßn su·∫•t backup:",
                choices=["H√†ng ng√†y", "H√†ng tu·∫ßn", "H√†ng th√°ng"],
                default=schedule_type_mapping.get(schedule_type, "H√†ng ng√†y")
            ).ask()
            
            if not selected_schedule_type:
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            # Ch·ªçn th·ªùi gian backup (gi·ªù v√† ph√∫t)
            hour_choices = [f"{h:02d}" for h in range(24)]
            selected_hour = select(
                "üïí Ch·ªçn gi·ªù th·ª±c hi·ªán backup (0-23):",
                choices=hour_choices,
                default=f"{hour:02d}"
            ).ask()
            
            if not selected_hour:
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            minute_choices = ["00", "15", "30", "45"]
            selected_minute = select(
                "üïí Ch·ªçn ph√∫t (0, 15, 30, 45):",
                choices=minute_choices,
                default=f"{minute:02d}" if minute in [0, 15, 30, 45] else "00"
            ).ask()
            
            if not selected_minute:
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            # Chuy·ªÉn ƒë·ªïi
            hour_int = int(selected_hour)
            minute_int = int(selected_minute)
            
            # Tu·ª≥ ch·ªçn th√™m d·ª±a v√†o lo·∫°i l·ªãch
            day_of_week = None
            day_of_month = None
            
            if selected_schedule_type == "H√†ng tu·∫ßn":
                day_names = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
                default_day = day_names[current_schedule.day_of_week] if 0 <= current_schedule.day_of_week < len(day_names) else "Ch·ªß Nh·∫≠t"
                
                selected_day = select(
                    "üìÖ Ch·ªçn ng√†y trong tu·∫ßn:",
                    choices=day_names,
                    default=default_day
                ).ask()
                
                if not selected_day:
                    info("ƒê√£ hu·ª∑ thao t√°c.")
                    return None
                
                day_map = {
                    "Th·ª© Hai": 0, "Th·ª© Ba": 1, "Th·ª© T∆∞": 2, "Th·ª© NƒÉm": 3, 
                    "Th·ª© S√°u": 4, "Th·ª© B·∫£y": 5, "Ch·ªß Nh·∫≠t": 6
                }
                day_of_week = day_map.get(selected_day, 0)
            
            elif selected_schedule_type == "H√†ng th√°ng":
                day_choices = [str(d) for d in range(1, 29)]  # 1-28 an to√†n cho t·∫•t c·∫£ c√°c th√°ng
                default_day = str(current_schedule.day_of_month) if 1 <= current_schedule.day_of_month <= 28 else "1"
                
                selected_day = select(
                    "üìÖ Ch·ªçn ng√†y trong th√°ng (1-28):",
                    choices=day_choices,
                    default=default_day
                ).ask()
                
                if not selected_day:
                    info("ƒê√£ hu·ª∑ thao t√°c.")
                    return None
                
                day_of_month = int(selected_day)
            
            # S·ªë l∆∞·ª£ng backup gi·ªØ l·∫°i
            retention_text = text(
                "üóÉÔ∏è S·ªë l∆∞·ª£ng b·∫£n sao l∆∞u g·∫ßn nh·∫•t gi·ªØ l·∫°i (0 = gi·ªØ t·∫•t c·∫£):",
                default=str(current_schedule.retention_count)
            ).ask()
            
            if not retention_text:
                retention_count = 3  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
            else:
                try:
                    retention_count = int(retention_text)
                except ValueError:
                    retention_count = 3
                    warn("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh: 3")
            
            # Format provider options to be more user-friendly
            provider_choices = []
            for prov in storage_providers:
                if prov == "local":
                    provider_choices.append({"name": "L∆∞u tr·ªØ local", "value": prov})
                elif prov.startswith("rclone:"):
                    remote_name = prov.split(":")[1]
                    provider_choices.append({"name": f"L∆∞u tr·ªØ ƒë√°m m√¢y ({remote_name})", "value": prov})
                else:
                    provider_choices.append({"name": prov, "value": prov})
            
            # T√¨m provider m·∫∑c ƒë·ªãnh
            default_provider = None
            for prov in provider_choices:
                if prov["value"] == provider:
                    default_provider = prov["name"]
                    break
            
            selected_provider = select(
                "üíæ Ch·ªçn n∆°i l∆∞u tr·ªØ backup:",
                choices=provider_choices,
                default=default_provider
            ).ask()
            
            if not selected_provider:
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            # T·∫°o schedule info ƒë·ªÉ hi·ªÉn th·ªã trong x√°c nh·∫≠n
            schedule_info = ""
            if selected_schedule_type == "H√†ng ng√†y":
                schedule_info = f"h√†ng ng√†y l√∫c {hour_int:02d}:{minute_int:02d}"
            elif selected_schedule_type == "H√†ng tu·∫ßn":
                day_names = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
                day_name = day_names[day_of_week] if 0 <= day_of_week < len(day_names) else "Ch·ªß Nh·∫≠t"
                schedule_info = f"h√†ng tu·∫ßn v√†o {day_name} l√∫c {hour_int:02d}:{minute_int:02d}"
            else:
                schedule_info = f"h√†ng th√°ng v√†o ng√†y {day_of_month} l√∫c {hour_int:02d}:{minute_int:02d}"
            
            # Format provider name cho ƒë·∫πp
            provider_display = selected_provider
            if selected_provider == "local":
                provider_display = "l∆∞u tr·ªØ local"
            elif selected_provider.startswith("rclone:"):
                remote_name = selected_provider.split(":")[1]
                provider_display = f"l∆∞u tr·ªØ ƒë√°m m√¢y ({remote_name})"
            
            # X√°c nh·∫≠n
            if not confirm(f"‚ö†Ô∏è X√°c nh·∫≠n l·ªãch tr√¨nh {schedule_info} cho website {domain} t·∫°i {provider_display}?").ask():
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            # T·∫°o config
            config = {
                "enabled": True,
                "schedule_type": "daily" if selected_schedule_type == "H√†ng ng√†y" else 
                              "weekly" if selected_schedule_type == "H√†ng tu·∫ßn" else 
                              "monthly",
                "hour": hour_int,
                "minute": minute_int,
                "day_of_week": day_of_week,
                "day_of_month": day_of_month,
                "retention_count": retention_count,
                "provider": selected_provider
            }
            
            return {
                "domain": domain,
                "action": "update",
                "config": config
            }
        else:
            # Kh√¥ng c√≥ l·ªãch tr√¨nh, h·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën t·∫°o kh√¥ng
            if not confirm(f"‚è∞ B·∫°n mu·ªën t·∫°o l·ªãch tr√¨nh backup t·ª± ƒë·ªông cho website {domain}?").ask():
                info("ƒê√£ hu·ª∑ thao t√°c t·∫°o l·ªãch tr√¨nh backup.")
                return None
            
            # Ch·ªçn t·∫ßn su·∫•t backup
            schedule_type = select(
                "üîÑ Ch·ªçn t·∫ßn su·∫•t backup:",
                choices=["H√†ng ng√†y", "H√†ng tu·∫ßn", "H√†ng th√°ng"],
                default="H√†ng ng√†y"
            ).ask()
            
            if not schedule_type:
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            # Ch·ªçn th·ªùi gian backup (gi·ªù v√† ph√∫t)
            hour_choices = [f"{h:02d}" for h in range(24)]
            selected_hour = select(
                "üïí Ch·ªçn gi·ªù th·ª±c hi·ªán backup (0-23):",
                choices=hour_choices,
                default="01"
            ).ask()
            
            if not selected_hour:
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            minute_choices = ["00", "15", "30", "45"]
            selected_minute = select(
                "üïí Ch·ªçn ph√∫t (0, 15, 30, 45):",
                choices=minute_choices,
                default="00"
            ).ask()
            
            if not selected_minute:
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            # Chuy·ªÉn ƒë·ªïi
            hour = int(selected_hour)
            minute = int(selected_minute)
            
            # Tu·ª≥ ch·ªçn th√™m d·ª±a v√†o lo·∫°i l·ªãch
            day_of_week = None
            day_of_month = None
            
            if schedule_type == "H√†ng tu·∫ßn":
                selected_day = select(
                    "üìÖ Ch·ªçn ng√†y trong tu·∫ßn:",
                    choices=["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"],
                    default="Ch·ªß Nh·∫≠t"
                ).ask()
                
                if not selected_day:
                    info("ƒê√£ hu·ª∑ thao t√°c.")
                    return None
                
                day_map = {
                    "Th·ª© Hai": 0, "Th·ª© Ba": 1, "Th·ª© T∆∞": 2, "Th·ª© NƒÉm": 3, 
                    "Th·ª© S√°u": 4, "Th·ª© B·∫£y": 5, "Ch·ªß Nh·∫≠t": 6
                }
                day_of_week = day_map.get(selected_day, 0)
            
            elif schedule_type == "H√†ng th√°ng":
                day_choices = [str(d) for d in range(1, 29)]  # 1-28 an to√†n cho t·∫•t c·∫£ c√°c th√°ng
                selected_day = select(
                    "üìÖ Ch·ªçn ng√†y trong th√°ng (1-28):",
                    choices=day_choices,
                    default="1"
                ).ask()
                
                if not selected_day:
                    info("ƒê√£ hu·ª∑ thao t√°c.")
                    return None
                
                day_of_month = int(selected_day)
            
            # S·ªë l∆∞·ª£ng backup gi·ªØ l·∫°i
            retention_text = text(
                "üóÉÔ∏è S·ªë l∆∞·ª£ng b·∫£n sao l∆∞u g·∫ßn nh·∫•t gi·ªØ l·∫°i (0 = gi·ªØ t·∫•t c·∫£):",
                default="3"
            ).ask()
            
            if not retention_text:
                retention_count = 3  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
            else:
                try:
                    retention_count = int(retention_text)
                except ValueError:
                    retention_count = 3
                    warn("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh: 3")
            
            # Format provider options to be more user-friendly
            provider_choices = []
            for provider in storage_providers:
                if provider == "local":
                    provider_choices.append({"name": "L∆∞u tr·ªØ local", "value": provider})
                elif provider.startswith("rclone:"):
                    remote_name = provider.split(":")[1]
                    provider_choices.append({"name": f"L∆∞u tr·ªØ ƒë√°m m√¢y ({remote_name})", "value": provider})
                else:
                    provider_choices.append({"name": provider, "value": provider})
            
            selected_provider = select(
                "üíæ Ch·ªçn n∆°i l∆∞u tr·ªØ backup:",
                choices=provider_choices,
                default="L∆∞u tr·ªØ local"
            ).ask()
            
            if not selected_provider:
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            # T·∫°o schedule info ƒë·ªÉ hi·ªÉn th·ªã trong x√°c nh·∫≠n
            schedule_info = ""
            if schedule_type == "H√†ng ng√†y":
                schedule_info = f"h√†ng ng√†y l√∫c {hour:02d}:{minute:02d}"
            elif schedule_type == "H√†ng tu·∫ßn":
                day_names = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
                day_name = day_names[day_of_week] if 0 <= day_of_week < len(day_names) else "Ch·ªß Nh·∫≠t"
                schedule_info = f"h√†ng tu·∫ßn v√†o {day_name} l√∫c {hour:02d}:{minute:02d}"
            else:
                schedule_info = f"h√†ng th√°ng v√†o ng√†y {day_of_month} l√∫c {hour:02d}:{minute:02d}"
            
            # Format provider name cho ƒë·∫πp
            provider_display = selected_provider
            if selected_provider == "local":
                provider_display = "l∆∞u tr·ªØ local"
            elif selected_provider.startswith("rclone:"):
                remote_name = selected_provider.split(":")[1]
                provider_display = f"l∆∞u tr·ªØ ƒë√°m m√¢y ({remote_name})"
            
            # X√°c nh·∫≠n
            if not confirm(f"‚ö†Ô∏è X√°c nh·∫≠n t·∫°o l·ªãch tr√¨nh backup {schedule_info} cho website {domain} t·∫°i {provider_display}?").ask():
                info("ƒê√£ hu·ª∑ thao t√°c.")
                return None
            
            # T·∫°o config
            config = {
                "enabled": True,
                "schedule_type": "daily" if schedule_type == "H√†ng ng√†y" else 
                              "weekly" if schedule_type == "H√†ng tu·∫ßn" else 
                              "monthly",
                "hour": hour,
                "minute": minute,
                "day_of_week": day_of_week,
                "day_of_month": day_of_month,
                "retention_count": retention_count,
                "provider": selected_provider
            }
            
            return {
                "domain": domain,
                "action": "create",
                "config": config
            }
    
    def _process(self, inputs):
        """
        X·ª≠ l√Ω vi·ªác t·∫°o, c·∫≠p nh·∫≠t ho·∫∑c x√≥a l·ªãch tr√¨nh backup d·ª±a tr√™n th√¥ng tin ƒë·∫ßu v√†o.
        
        Args:
            inputs: Dict ch·ª©a th√¥ng tin domain, h√†nh ƒë·ªông v√† c·∫•u h√¨nh l·ªãch tr√¨nh
            
        Returns:
            dict: K·∫øt qu·∫£ x·ª≠ l√Ω
        """
        if not inputs:
            return None
            
        domain = inputs["domain"]
        action = inputs["action"]
        config = inputs.get("config")
        
        # Kh·ªüi t·∫°o BackupManager
        backup_manager = BackupManager()
        
        result = {"success": False, "message": "", "domain": domain, "action": action}
        
        try:
            if action == "disable":
                # V√¥ hi·ªáu h√≥a l·ªãch tr√¨nh
                schedule = {"enabled": False}
                success, message = backup_manager.schedule_backup(domain, schedule)
                
                result["success"] = success
                result["message"] = message
                
            elif action in ["create", "update"]:
                # T·∫°o/c·∫≠p nh·∫≠t l·ªãch tr√¨nh
                success, message = backup_manager.schedule_backup(domain, config, config["provider"])
                
                result["success"] = success
                result["message"] = message
                result["config"] = config
            
            return result
        except Exception as e:
            error_msg = f"L·ªói x·ª≠ l√Ω l·ªãch tr√¨nh backup: {str(e)}"
            error(error_msg)
            result["success"] = False
            result["message"] = error_msg
            return result
    
    def _show_results(self):
        """
        Hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω l·ªãch tr√¨nh backup.
        
        S·ª≠ d·ª•ng self.result ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω.
        """
        if not self.result:
            return
            
        domain = self.result["domain"]
        action = self.result["action"]
        success = self.result["success"]
        message = self.result.get("message", "")
        config = self.result.get("config")
        
        if success:
            if action == "disable":
                success(f"‚úÖ ƒê√£ v√¥ hi·ªáu h√≥a l·ªãch tr√¨nh backup cho website {domain}.")
            elif action == "create":
                success(f"‚úÖ ƒê√£ t·∫°o l·ªãch tr√¨nh backup cho website {domain}.")
                
                # Hi·ªÉn th·ªã th√¥ng tin l·ªãch tr√¨nh
                if config:
                    schedule_type = config["schedule_type"]
                    hour = config["hour"]
                    minute = config["minute"]
                    
                    schedule_info = ""
                    if schedule_type == "daily":
                        schedule_info = f"h√†ng ng√†y l√∫c {hour:02d}:{minute:02d}"
                    elif schedule_type == "weekly":
                        day = config["day_of_week"]
                        day_names = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
                        day_name = day_names[day] if 0 <= day < len(day_names) else f"ng√†y {day}"
                        schedule_info = f"h√†ng tu·∫ßn v√†o {day_name} l√∫c {hour:02d}:{minute:02d}"
                    elif schedule_type == "monthly":
                        day = config["day_of_month"]
                        schedule_info = f"h√†ng th√°ng v√†o ng√†y {day} l√∫c {hour:02d}:{minute:02d}"
                    
                    # Hi·ªÉn th·ªã provider
                    provider = config["provider"]
                    provider_display = provider
                    if provider == "local":
                        provider_display = "l∆∞u tr·ªØ local"
                    elif provider.startswith("rclone:"):
                        remote_name = provider.split(":")[1]
                        provider_display = f"l∆∞u tr·ªØ ƒë√°m m√¢y ({remote_name})"
                    
                    info(f"‚è∞ L·ªãch tr√¨nh: {schedule_info}")
                    info(f"üì¶ L∆∞u tr·ªØ t·∫°i: {provider_display}")
            elif action == "update":
                success(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·ªãch tr√¨nh backup cho website {domain}.")
                
                # Hi·ªÉn th·ªã th√¥ng tin l·ªãch tr√¨nh ƒë√£ c·∫≠p nh·∫≠t
                if config:
                    schedule_type = config["schedule_type"]
                    hour = config["hour"]
                    minute = config["minute"]
                    
                    schedule_info = ""
                    if schedule_type == "daily":
                        schedule_info = f"h√†ng ng√†y l√∫c {hour:02d}:{minute:02d}"
                    elif schedule_type == "weekly":
                        day = config["day_of_week"]
                        day_names = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
                        day_name = day_names[day] if 0 <= day < len(day_names) else f"ng√†y {day}"
                        schedule_info = f"h√†ng tu·∫ßn v√†o {day_name} l√∫c {hour:02d}:{minute:02d}"
                    elif schedule_type == "monthly":
                        day = config["day_of_month"]
                        schedule_info = f"h√†ng th√°ng v√†o ng√†y {day} l√∫c {hour:02d}:{minute:02d}"
                    
                    # Hi·ªÉn th·ªã provider
                    provider = config["provider"]
                    provider_display = provider
                    if provider == "local":
                        provider_display = "l∆∞u tr·ªØ local"
                    elif provider.startswith("rclone:"):
                        remote_name = provider.split(":")[1]
                        provider_display = f"l∆∞u tr·ªØ ƒë√°m m√¢y ({remote_name})"
                    
                    info(f"‚è∞ L·ªãch tr√¨nh m·ªõi: {schedule_info}")
                    info(f"üì¶ L∆∞u tr·ªØ t·∫°i: {provider_display}")
        else:
            error(f"‚ùå L·ªói x·ª≠ l√Ω l·ªãch tr√¨nh backup: {message}")


# H√†m ti·ªán √≠ch ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©
@log_call
def prompt_schedule_backup():
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ l√™n l·ªãch backup t·ª± ƒë·ªông.
    Duy tr√¨ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©.
    
    Returns:
        K·∫øt qu·∫£ t·ª´ qu√° tr√¨nh l√™n l·ªãch ho·∫∑c None n·∫øu b·ªã h·ªßy
    """
    prompt = ScheduleBackupPrompt()
    return prompt.run()