"""
Module hi·ªÉn th·ªã prompt ƒë·ªÉ backup website.
"""
from questionary import select, confirm, checkbox
from core.backend.utils.debug import log_call, info, error, warn, debug, success
from core.backend.abc.prompt_base import PromptBase
from core.backend.modules.website.website_utils import website_list
from core.backend.modules.backup.website_backup import backup_website

class BackupWebsitePrompt(PromptBase):
    """
    L·ªõp x·ª≠ l√Ω prompt backup website.
    
    Tri·ªÉn khai l·ªõp tr·ª´u t∆∞·ª£ng PromptBase v·ªõi c√°c ph∆∞∆°ng th·ª©c:
    - _collect_inputs: Thu th·∫≠p th√¥ng tin domain c·∫ßn backup
    - _process: Th·ª±c hi·ªán vi·ªác backup website
    - _show_results: Hi·ªÉn th·ªã k·∫øt qu·∫£ backup
    """
    
    def _collect_inputs(self):
        """
        Thu th·∫≠p ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng v·ªÅ website c·∫ßn backup.
        
        Returns:
            dict: Ch·ª©a th√¥ng tin domain ho·∫∑c danh s√°ch domain c·∫ßn backup, ho·∫∑c None n·∫øu b·ªã h·ªßy
        """
        # L·∫•y danh s√°ch website
        websites = website_list()
        if not websites:
            error("‚ùå Kh√¥ng t√¨m th·∫•y website n√†o ƒë·ªÉ backup.")
            return None
        
        # H·ªèi ng∆∞·ªùi d√πng mu·ªën backup m·ªôt hay nhi·ªÅu website
        backup_mode = select(
            "üîç B·∫°n mu·ªën backup website nh∆∞ th·∫ø n√†o?",
            choices=[
                "Backup m·ªôt website",
                "Backup nhi·ªÅu website"
            ]
        ).ask()
        
        if not backup_mode:
            info("ƒê√£ hu·ª∑ thao t√°c backup.")
            return None
        
        selected_domains = []
        
        if backup_mode == "Backup m·ªôt website":
            # Ch·ªçn m·ªôt website
            domain = select(
                "üåê Ch·ªçn website c·∫ßn backup:",
                choices=websites
            ).ask()
            
            if not domain:
                info("ƒê√£ hu·ª∑ thao t√°c backup.")
                return None
                
            if not confirm(f"‚ö†Ô∏è X√°c nh·∫≠n backup website {domain}?").ask():
                info("ƒê√£ hu·ª∑ thao t√°c backup.")
                return None
                
            selected_domains = [domain]
        else:
            # Ch·ªçn nhi·ªÅu website
            selected_domains = checkbox(
                "üåê Ch·ªçn c√°c website c·∫ßn backup (d√πng ph√≠m space ƒë·ªÉ ch·ªçn):",
                choices=websites
            ).ask()
            
            if not selected_domains:
                info("Kh√¥ng c√≥ website n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ backup.")
                return None
                
            if not confirm(f"‚ö†Ô∏è X√°c nh·∫≠n backup {len(selected_domains)} website?").ask():
                info("ƒê√£ hu·ª∑ thao t√°c backup.")
                return None
        
        return {
            "backup_mode": backup_mode,
            "domains": selected_domains
        }
    
    def _process(self, inputs):
        """
        Th·ª±c hi·ªán vi·ªác backup website d·ª±a tr√™n th√¥ng tin ƒë·∫ßu v√†o.
        
        Args:
            inputs: Dict ch·ª©a th√¥ng tin domain ho·∫∑c danh s√°ch domain c·∫ßn backup
            
        Returns:
            dict: K·∫øt qu·∫£ x·ª≠ l√Ω bao g·ªìm tr·∫°ng th√°i th√†nh c√¥ng v√† chi ti·∫øt backup
        """
        backup_mode = inputs["backup_mode"]
        domains = inputs["domains"]
        
        backup_results = []
        success_count = 0
        
        for domain in domains:
            result = {
                "domain": domain,
                "success": False,
                "error": None
            }
            
            info(f"‚è≥ ƒêang ti·∫øn h√†nh backup website {domain}...")
            
            try:
                backup_website(domain)
                result["success"] = True
                success_count += 1
                
                if backup_mode == "Backup nhi·ªÅu website":
                    success(f"‚úÖ Backup website {domain} ho√†n t·∫•t.")
            except Exception as e:
                error_msg = f"‚ùå L·ªói khi backup website {domain}: {e}"
                error(error_msg)
                result["success"] = False
                result["error"] = str(e)
            
            backup_results.append(result)
        
        return {
            "backup_mode": backup_mode,
            "results": backup_results,
            "total_count": len(domains),
            "success_count": success_count,
            "failed_count": len(domains) - success_count
        }
    
    def _show_results(self):
        """
        Hi·ªÉn th·ªã k·∫øt qu·∫£ backup website.
        
        S·ª≠ d·ª•ng self.result ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω.
        """
        if not self.result:
            return
        
        backup_mode = self.result["backup_mode"]
        results = self.result["results"]
        total_count = self.result["total_count"]
        success_count = self.result["success_count"]
        failed_count = self.result["failed_count"]
        
        # Hi·ªÉn th·ªã t·ªïng quan k·∫øt qu·∫£ n·∫øu l√† backup nhi·ªÅu website
        if backup_mode == "Backup nhi·ªÅu website":
            if success_count == total_count:
                success(f"üéâ ƒê√£ ho√†n t·∫•t backup t·∫•t c·∫£ {total_count} website th√†nh c√¥ng.")
            elif success_count > 0:
                warn(f"‚ö†Ô∏è ƒê√£ backup {success_count}/{total_count} website, {failed_count} website g·∫∑p l·ªói.")
            else:
                error(f"‚ùå Kh√¥ng th·ªÉ backup b·∫•t k·ª≥ website n√†o.")
        # N·∫øu l√† backup m·ªôt website, th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong qu√° tr√¨nh x·ª≠ l√Ω
        else:
            domain = results[0]["domain"]
            if results[0]["success"]:
                success(f"‚úÖ Ho√†n t·∫•t backup website {domain}.")
            else:
                error_msg = results[0].get("error", "L·ªói kh√¥ng x√°c ƒë·ªãnh")
                error(f"‚ùå Backup website {domain} th·∫•t b·∫°i: {error_msg}")


# H√†m ti·ªán √≠ch ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©
@log_call
def prompt_backup_website():
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ backup website.
    Duy tr√¨ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©.
    
    Returns:
        K·∫øt qu·∫£ t·ª´ qu√° tr√¨nh backup ho·∫∑c None n·∫øu b·ªã h·ªßy
    """
    prompt = BackupWebsitePrompt()
    return prompt.run()