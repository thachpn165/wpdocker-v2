"""
Module x·ª≠ l√Ω x√≥a backup website.
"""
from questionary import select, confirm, checkbox
import os
import shutil
from core.backend.utils.debug import log_call, info, error, warn, debug, success
from core.backend.abc.prompt_base import PromptBase
from core.backend.modules.website.website_utils import select_website, get_site_config, set_site_config
from core.backend.modules.backup.backup_restore import get_backup_folders, get_backup_info

class BackupDeletePrompt(PromptBase):
    """
    L·ªõp x·ª≠ l√Ω prompt x√≥a backup website.
    
    Tri·ªÉn khai l·ªõp tr·ª´u t∆∞·ª£ng PromptBase v·ªõi c√°c ph∆∞∆°ng th·ª©c:
    - _collect_inputs: Thu th·∫≠p th√¥ng tin domain, backup, v√† l·ª±a ch·ªçn x√≥a
    - _process: Th·ª±c hi·ªán vi·ªác x√≥a backup theo l·ª±a ch·ªçn
    - _show_results: Hi·ªÉn th·ªã k·∫øt qu·∫£ x√≥a backup
    """
    
    def _collect_inputs(self):
        """
        Thu th·∫≠p ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng v·ªÅ website v√† l·ª±a ch·ªçn x√≥a backup.
        
        Returns:
            dict: Ch·ª©a th√¥ng tin domain, backup, v√† l·ª±a ch·ªçn x√≥a ho·∫∑c None n·∫øu b·ªã h·ªßy
        """
        # Ch·ªçn m·ªôt website s·ª≠ d·ª•ng h√†m select_website c√≥ s·∫µn
        domain = select_website("üåê Ch·ªçn website ƒë·ªÉ x√≥a backup:")
        
        if not domain:
            # Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong h√†m select_website
            return None
        
        # L·∫•y th√¥ng tin v·ªÅ c√°c th∆∞ m·ª•c backup
        backup_dir, backup_folders, last_backup_info = get_backup_folders(domain)
        
        if not backup_folders:
            return None  # Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong h√†m get_backup_folders
        
        # T·∫°o danh s√°ch hi·ªÉn th·ªã v·ªõi th√¥ng tin th√™m v·ªÅ th·ªùi gian v√† k√≠ch th∆∞·ªõc
        display_choices = []
        backup_info_list = []
        
        for folder in backup_folders:
            backup_info = get_backup_info(backup_dir, folder, last_backup_info)
            backup_info_list.append(backup_info)
            
            if "error" in backup_info:
                display_choices.append(f"{folder} (Kh√¥ng th·ªÉ l·∫•y th√¥ng tin: {backup_info['error']})")
            else:
                status = "‚úÖ L√† b·∫£n backup g·∫ßn nh·∫•t" if backup_info["is_latest"] else ""
                display_choices.append(f"{folder} [{backup_info['time']}] [{backup_info['size']}] {status}")
        
        # H·ªèi ng∆∞·ªùi d√πng mu·ªën x√≥a m·ªôt hay nhi·ªÅu backup
        delete_mode = select(
            "üîç B·∫°n mu·ªën x√≥a backup nh∆∞ th·∫ø n√†o?",
            choices=[
                "X√≥a m·ªôt b·∫£n backup",
                "X√≥a nhi·ªÅu b·∫£n backup",
                "X√≥a t·∫•t c·∫£ b·∫£n backup"
            ]
        ).ask()
        
        if not delete_mode:
            info("ƒê√£ hu·ª∑ thao t√°c x√≥a backup.")
            return None
        
        selected_backups = []
        
        if delete_mode == "X√≥a m·ªôt b·∫£n backup":
            # Ch·ªçn m·ªôt backup ƒë·ªÉ x√≥a
            selected_backup = select(
                "üìÅ Ch·ªçn b·∫£n backup ƒë·ªÉ x√≥a:",
                choices=display_choices
            ).ask()
            
            if not selected_backup:
                info("ƒê√£ hu·ª∑ thao t√°c x√≥a backup.")
                return None
            
            # L·∫•y th√¥ng tin backup ƒë√£ ch·ªçn
            folder_name = selected_backup.split(" ")[0]
            selected_index = next((i for i, item in enumerate(backup_info_list) if item["folder"] == folder_name), -1)
            
            if selected_index == -1:
                error(f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin cho b·∫£n backup ƒë√£ ch·ªçn.")
                return None
                
            backup_info = backup_info_list[selected_index]
            selected_backups = [backup_info]
            
            if not confirm(f"‚ö†Ô∏è X√°c nh·∫≠n x√≥a backup {folder_name} c·ªßa website {domain}?").ask():
                info("ƒê√£ hu·ª∑ thao t√°c x√≥a backup.")
                return None
            
        elif delete_mode == "X√≥a nhi·ªÅu b·∫£n backup":
            # Ch·ªçn nhi·ªÅu backup ƒë·ªÉ x√≥a
            backup_indices = [i for i in range(len(display_choices))]
            backup_choices = [f"{i+1}. {choice}" for i, choice in zip(backup_indices, display_choices)]
            
            selected_backup_choices = checkbox(
                "üìÅ Ch·ªçn c√°c b·∫£n backup ƒë·ªÉ x√≥a (d√πng ph√≠m space ƒë·ªÉ ch·ªçn):",
                choices=backup_choices
            ).ask()
            
            if not selected_backup_choices:
                info("ƒê√£ hu·ª∑ thao t√°c x√≥a backup.")
                return None
            
            # L·∫•y danh s√°ch c√°c index ƒë∆∞·ª£c ch·ªçn
            selected_indices = [int(item.split(".")[0]) - 1 for item in selected_backup_choices]
            for idx in selected_indices:
                if 0 <= idx < len(backup_info_list):
                    selected_backups.append(backup_info_list[idx])
            
            if not selected_backups:
                error("‚ùå Kh√¥ng c√≥ backup n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ x√≥a.")
                return None
            
            if not confirm(f"‚ö†Ô∏è X√°c nh·∫≠n x√≥a {len(selected_backups)} b·∫£n backup c·ªßa website {domain}?").ask():
                info("ƒê√£ hu·ª∑ thao t√°c x√≥a backup.")
                return None
            
        elif delete_mode == "X√≥a t·∫•t c·∫£ b·∫£n backup":
            selected_backups = backup_info_list
            
            if not confirm(f"‚ö†Ô∏è C·∫¢NH B√ÅO: X√°c nh·∫≠n x√≥a T·∫§T C·∫¢ {len(backup_folders)} b·∫£n backup c·ªßa website {domain}?").ask():
                info("ƒê√£ hu·ª∑ thao t√°c x√≥a backup.")
                return None
        
        return {
            "domain": domain,
            "delete_mode": delete_mode,
            "selected_backups": selected_backups,
            "backup_dir": backup_dir
        }
    
    def _process(self, inputs):
        """
        X·ª≠ l√Ω vi·ªác x√≥a backup d·ª±a tr√™n th√¥ng tin ƒë·∫ßu v√†o.
        
        Args:
            inputs: Dict ch·ª©a th√¥ng tin domain, l·ª±a ch·ªçn x√≥a v√† danh s√°ch backup
            
        Returns:
            dict: K·∫øt qu·∫£ x·ª≠ l√Ω bao g·ªìm tr·∫°ng th√°i th√†nh c√¥ng v√† chi ti·∫øt x√≥a
        """
        domain = inputs["domain"]
        delete_mode = inputs["delete_mode"]
        selected_backups = inputs["selected_backups"]
        
        deletion_results = []
        success_count = 0
        failed_count = 0
        cleanup_config = False
        
        for backup_info in selected_backups:
            folder = backup_info["folder"]
            folder_path = backup_info["path"]
            result = {
                "folder": folder,
                "success": False,
                "error": None
            }
            
            try:
                shutil.rmtree(folder_path)
                success(f"‚úÖ ƒê√£ x√≥a backup {folder} c·ªßa website {domain}.")
                result["success"] = True
                success_count += 1
                
                # Ki·ªÉm tra xem c√≥ c·∫ßn c·∫≠p nh·∫≠t c·∫•u h√¨nh backup kh√¥ng
                is_in_config = self._check_backup_in_config(domain, folder_path)
                if is_in_config:
                    cleanup_config = True
            except Exception as e:
                error_msg = f"‚ùå L·ªói khi x√≥a backup {folder}: {e}"
                error(error_msg)
                result["success"] = False
                result["error"] = str(e)
                failed_count += 1
            
            deletion_results.append(result)
        
        # N·∫øu x√≥a to√†n b·ªô backup ho·∫∑c c√≥ backup trong c·∫•u h√¨nh b·ªã x√≥a
        if delete_mode == "X√≥a t·∫•t c·∫£ b·∫£n backup" or cleanup_config:
            self._cleanup_backup_config(domain)
        
        return {
            "domain": domain,
            "delete_mode": delete_mode,
            "deletion_results": deletion_results,
            "success_count": success_count,
            "failed_count": failed_count,
            "total_count": len(selected_backups),
            "config_cleaned": cleanup_config
        }
    
    def _show_results(self):
        """
        Hi·ªÉn th·ªã k·∫øt qu·∫£ x√≥a backup.
        
        S·ª≠ d·ª•ng self.result ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω.
        """
        if not self.result:
            return
        
        domain = self.result["domain"]
        delete_mode = self.result["delete_mode"]
        success_count = self.result["success_count"]
        failed_count = self.result["failed_count"]
        total_count = self.result["total_count"]
        config_cleaned = self.result["config_cleaned"]
        
        # Hi·ªÉn th·ªã t·ªïng quan k·∫øt qu·∫£
        if success_count == total_count:
            success(f"üéâ ƒê√£ x√≥a th√†nh c√¥ng {success_count}/{total_count} b·∫£n backup c·ªßa website {domain}.")
        elif success_count > 0:
            warn(f"‚ö†Ô∏è ƒê√£ x√≥a {success_count}/{total_count} b·∫£n backup, {failed_count} b·∫£n backup g·∫∑p l·ªói.")
        else:
            error(f"‚ùå Kh√¥ng th·ªÉ x√≥a b·∫•t k·ª≥ b·∫£n backup n√†o c·ªßa website {domain}.")
        
        # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c·∫•u h√¨nh
        if config_cleaned:
            info(f"üßπ ƒê√£ x√≥a th√¥ng tin backup trong c·∫•u h√¨nh cho {domain}")
    
    def _check_backup_in_config(self, domain, folder_path):
        """
        Ki·ªÉm tra xem backup c√≥ t·ªìn t·∫°i trong c·∫•u h√¨nh hay kh√¥ng.
        
        Args:
            domain (str): T√™n domain
            folder_path (str): ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c backup
            
        Returns:
            bool: True n·∫øu backup c√≥ trong c·∫•u h√¨nh, False n·∫øu kh√¥ng
        """
        site_config = get_site_config(domain)
        if not site_config or not site_config.backup or not site_config.backup.last_backup:
            return False
        
        backup_info = site_config.backup.last_backup
        
        # Ki·ªÉm tra n·∫øu file trong c·∫•u h√¨nh thu·ªôc th∆∞ m·ª•c ƒë√£ x√≥a
        if backup_info.file and backup_info.file.startswith(folder_path):
            return True
        
        return False
    
    def _cleanup_backup_config(self, domain):
        """
        X√≥a th√¥ng tin backup trong c·∫•u h√¨nh.
        
        Args:
            domain (str): T√™n domain
        """
        site_config = get_site_config(domain)
        if site_config and site_config.backup:
            site_config.backup = None
            set_site_config(domain, site_config)
            info(f"üßπ ƒê√£ x√≥a th√¥ng tin backup trong c·∫•u h√¨nh cho {domain}")


# H√†m ti·ªán √≠ch ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©
@log_call
def prompt_delete_backup():
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ x√≥a backup.
    Duy tr√¨ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©.
    
    Returns:
        K·∫øt qu·∫£ t·ª´ qu√° tr√¨nh x√≥a backup ho·∫∑c None n·∫øu b·ªã h·ªßy
    """
    prompt = BackupDeletePrompt()
    return prompt.run()