from questionary import select, confirm, checkbox
import os
import glob
import shutil
from datetime import datetime
from core.backend.utils.debug import log_call, info, error, warn, debug, success
from core.backend.modules.website.website_utils import website_list, get_sites_dir
from core.backend.modules.website.website_utils import get_site_config, set_site_config, delete_site_config
from core.backend.models.config import SiteBackup, SiteBackupInfo

@log_call
def prompt_delete_backup():
    """
    Hi·ªÉn th·ªã prompt ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn v√† x√≥a backup c·ªßa website.
    """
    # L·∫•y danh s√°ch website
    websites = website_list()
    if not websites:
        error("‚ùå Kh√¥ng t√¨m th·∫•y website n√†o ƒë·ªÉ x√≥a backup.")
        return
    
    # Ch·ªçn m·ªôt website
    domain = select(
        "üåê Ch·ªçn website ƒë·ªÉ x√≥a backup:",
        choices=websites
    ).ask()
    
    if not domain:
        info("ƒê√£ hu·ª∑ thao t√°c x√≥a backup.")
        return
    
    # L·∫•y th∆∞ m·ª•c backups c·ªßa website
    sites_dir = get_sites_dir()
    backup_dir = os.path.join(sites_dir, domain, "backups")
    
    if not os.path.exists(backup_dir):
        error(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c backup cho website {domain}.")
        return
    
    # T√¨m t·∫•t c·∫£ c√°c th∆∞ m·ª•c backup trong th∆∞ m·ª•c backups
    backup_folders = [d for d in os.listdir(backup_dir) if os.path.isdir(os.path.join(backup_dir, d)) and d.startswith("backup_")]
    
    if not backup_folders:
        error(f"‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n backup n√†o cho website {domain}.")
        return
    
    # T·∫°o danh s√°ch hi·ªÉn th·ªã v·ªõi th√¥ng tin th√™m v·ªÅ th·ªùi gian
    display_choices = []
    for folder in backup_folders:
        folder_path = os.path.join(backup_dir, folder)
        try:
            # L·∫•y th·ªùi gian t·∫°o th∆∞ m·ª•c
            folder_time = datetime.fromtimestamp(os.path.getctime(folder_path))
            time_str = folder_time.strftime("%d/%m/%Y %H:%M:%S")
            
            # T√≠nh k√≠ch th∆∞·ªõc c·ªßa th∆∞ m·ª•c
            total_size = 0
            for dirpath, dirnames, filenames in os.walk(folder_path):
                for f in filenames:
                    fp = os.path.join(dirpath, f)
                    total_size += os.path.getsize(fp)
            
            size_str = f"{total_size / (1024*1024):.2f} MB"
            
            display_choices.append(f"{folder} ({time_str}, {size_str})")
        except Exception as e:
            display_choices.append(f"{folder} (Kh√¥ng th·ªÉ l·∫•y th√¥ng tin: {e})")
    
    # H·ªèi ng∆∞·ªùi d√πng mu·ªën x√≥a m·ªôt hay nhi·ªÅu backup
    delete_mode = select(
        "üîç B·∫°n mu·ªën x√≥a backup nh∆∞ th·∫ø n√†o?",
        choices=[
            "X√≥a m·ªôt b·∫£n backup",
            "X√≥a nhi·ªÅu b·∫£n backup",
            "X√≥a t·∫•t c·∫£ b·∫£n backup"
        ]
    ).ask()
    
    if delete_mode == "X√≥a m·ªôt b·∫£n backup":
        # Ch·ªçn m·ªôt backup ƒë·ªÉ x√≥a
        selected_backup = select(
            "üìÅ Ch·ªçn b·∫£n backup ƒë·ªÉ x√≥a:",
            choices=display_choices
        ).ask()
        
        if selected_backup:
            # L·∫•y t√™n th∆∞ m·ª•c t·ª´ l·ª±a ch·ªçn ƒë∆∞·ª£c hi·ªÉn th·ªã
            folder_name = selected_backup.split(" ")[0]
            folder_path = os.path.join(backup_dir, folder_name)
            
            if confirm(f"‚ö†Ô∏è X√°c nh·∫≠n x√≥a backup {folder_name} c·ªßa website {domain}?").ask():
                try:
                    shutil.rmtree(folder_path)
                    success(f"‚úÖ ƒê√£ x√≥a backup {folder_name} c·ªßa website {domain}.")
                    
                    # Ki·ªÉm tra n·∫øu backup n√†y ƒë∆∞·ª£c l∆∞u trong c·∫•u h√¨nh
                    _cleanup_backup_config(domain, folder_path)
                except Exception as e:
                    error(f"‚ùå L·ªói khi x√≥a backup {folder_name}: {e}")
            else:
                info("ƒê√£ hu·ª∑ thao t√°c x√≥a backup.")
    
    elif delete_mode == "X√≥a nhi·ªÅu b·∫£n backup":
        # Ch·ªçn nhi·ªÅu backup ƒë·ªÉ x√≥a
        backup_indices = [i for i in range(len(display_choices))]
        backup_choices = [f"{i+1}. {choice}" for i, choice in zip(backup_indices, display_choices)]
        
        selected_backups = checkbox(
            "üìÅ Ch·ªçn c√°c b·∫£n backup ƒë·ªÉ x√≥a (d√πng ph√≠m space ƒë·ªÉ ch·ªçn):",
            choices=backup_choices
        ).ask()
        
        if selected_backups:
            # L·∫•y danh s√°ch c√°c index ƒë∆∞·ª£c ch·ªçn
            selected_indices = [int(item.split(".")[0]) - 1 for item in selected_backups]
            selected_folders = [backup_folders[i] for i in selected_indices]
            
            if confirm(f"‚ö†Ô∏è X√°c nh·∫≠n x√≥a {len(selected_folders)} b·∫£n backup c·ªßa website {domain}?").ask():
                for folder in selected_folders:
                    folder_path = os.path.join(backup_dir, folder)
                    try:
                        shutil.rmtree(folder_path)
                        success(f"‚úÖ ƒê√£ x√≥a backup {folder} c·ªßa website {domain}.")
                        
                        # Ki·ªÉm tra n·∫øu backup n√†y ƒë∆∞·ª£c l∆∞u trong c·∫•u h√¨nh
                        _cleanup_backup_config(domain, folder_path)
                    except Exception as e:
                        error(f"‚ùå L·ªói khi x√≥a backup {folder}: {e}")
                
                info(f"üéâ ƒê√£ ho√†n t·∫•t x√≥a {len(selected_folders)} b·∫£n backup.")
            else:
                info("ƒê√£ hu·ª∑ thao t√°c x√≥a backup.")
    
    elif delete_mode == "X√≥a t·∫•t c·∫£ b·∫£n backup":
        if confirm(f"‚ö†Ô∏è C·∫¢NH B√ÅO: X√°c nh·∫≠n x√≥a T·∫§T C·∫¢ {len(backup_folders)} b·∫£n backup c·ªßa website {domain}?").ask():
            for folder in backup_folders:
                folder_path = os.path.join(backup_dir, folder)
                try:
                    shutil.rmtree(folder_path)
                    success(f"‚úÖ ƒê√£ x√≥a backup {folder} c·ªßa website {domain}.")
                except Exception as e:
                    error(f"‚ùå L·ªói khi x√≥a backup {folder}: {e}")
            
            # X√≥a to√†n b·ªô c·∫•u h√¨nh backup
            site_config = get_site_config(domain)
            if site_config and site_config.backup:
                site_config.backup = None
                set_site_config(domain, site_config)
                info(f"üßπ ƒê√£ x√≥a th√¥ng tin backup trong c·∫•u h√¨nh cho {domain}")
            
            info(f"üéâ ƒê√£ ho√†n t·∫•t x√≥a t·∫•t c·∫£ b·∫£n backup c·ªßa website {domain}.")
        else:
            info("ƒê√£ hu·ª∑ thao t√°c x√≥a backup.")

def _cleanup_backup_config(domain, deleted_folder_path):
    """Helper function to clean up backup config if needed."""
    site_config = get_site_config(domain)
    if not site_config or not site_config.backup or not site_config.backup.last_backup:
        return
    
    backup_info = site_config.backup.last_backup
    
    # Ki·ªÉm tra n·∫øu file trong c·∫•u h√¨nh thu·ªôc th∆∞ m·ª•c ƒë√£ x√≥a
    if backup_info.file and backup_info.file.startswith(deleted_folder_path):
        info(f"üîç Ph√°t hi·ªán c·∫•u h√¨nh backup ƒëang tr·ªè ƒë·∫øn file ƒë√£ x√≥a")
        
        # X√≥a th√¥ng tin backup
        site_config.backup = None
        set_site_config(domain, site_config)
        info(f"üßπ ƒê√£ x√≥a th√¥ng tin backup trong c·∫•u h√¨nh cho {domain}")