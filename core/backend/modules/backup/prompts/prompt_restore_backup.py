"""
Module x·ª≠ l√Ω kh√¥i ph·ª•c backup website.
"""
from questionary import select, confirm, checkbox
import os
from core.backend.utils.debug import log_call, info, error, warn, debug, success
from core.backend.abc.prompt_base import PromptBase
from core.backend.modules.website.website_utils import select_website
from core.backend.modules.backup.backup_restore import (
    get_backup_folders,
    get_backup_info,
    restore_database,
    restore_source_code,
    restart_website
)

class BackupRestorePrompt(PromptBase):
    """
    L·ªõp x·ª≠ l√Ω prompt kh√¥i ph·ª•c backup website.
    
    Tri·ªÉn khai l·ªõp tr·ª´u t∆∞·ª£ng PromptBase v·ªõi c√°c ph∆∞∆°ng th·ª©c:
    - _collect_inputs: Thu th·∫≠p th√¥ng tin domain, backup, v√† c√°c th√†nh ph·∫ßn c·∫ßn kh√¥i ph·ª•c
    - _process: Ti·∫øn h√†nh qu√° tr√¨nh kh√¥i ph·ª•c backup
    - _show_results: Hi·ªÉn th·ªã k·∫øt qu·∫£ kh√¥i ph·ª•c
    """
    
    def _collect_inputs(self):
        """
        Thu th·∫≠p ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng v·ªÅ website, backup, v√† c√°c th√†nh ph·∫ßn c·∫ßn kh√¥i ph·ª•c.
        
        Returns:
            dict: Ch·ª©a th√¥ng tin domain, backup, v√† th√†nh ph·∫ßn c·∫ßn kh√¥i ph·ª•c ho·∫∑c None n·∫øu b·ªã h·ªßy
        """
        # Ch·ªçn m·ªôt website s·ª≠ d·ª•ng h√†m select_website c√≥ s·∫µn
        domain = select_website("üåê Ch·ªçn website ƒë·ªÉ kh√¥i ph·ª•c backup:")
        
        if not domain:
            # Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong h√†m select_website
            return None
        
        # L·∫•y th√¥ng tin v·ªÅ c√°c th∆∞ m·ª•c backup
        backup_dir, backup_folders, last_backup_info = get_backup_folders(domain)
        
        if not backup_folders:
            return None  # Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong h√†m get_backup_folders
        
        # T·∫°o danh s√°ch hi·ªÉn th·ªã v·ªõi th√¥ng tin th√™m v·ªÅ th·ªùi gian v√† k√≠ch th∆∞·ªõc
        display_choices = []
        backup_info_list = []
        
        for folder in backup_folders:
            backup_info = get_backup_info(backup_dir, folder, last_backup_info)
            backup_info_list.append(backup_info)
            
            if "error" in backup_info:
                display_choices.append(f"{folder} (Kh√¥ng th·ªÉ l·∫•y th√¥ng tin: {backup_info['error']})")
            else:
                status = "‚úÖ L√† b·∫£n backup g·∫ßn nh·∫•t" if backup_info["is_latest"] else ""
                display_choices.append(f"{folder} [{backup_info['time']}] [{backup_info['size']}] {status}")
        
        # Ch·ªçn m·ªôt backup ƒë·ªÉ kh√¥i ph·ª•c
        selected_backup = select(
            "üìÅ Ch·ªçn b·∫£n backup ƒë·ªÉ kh√¥i ph·ª•c:",
            choices=display_choices
        ).ask()
        
        if not selected_backup:
            info("ƒê√£ hu·ª∑ thao t√°c kh√¥i ph·ª•c backup.")
            return None
        
        # L·∫•y th√¥ng tin backup ƒë√£ ch·ªçn
        folder_name = selected_backup.split(" ")[0]
        selected_index = next((i for i, item in enumerate(backup_info_list) if item["folder"] == folder_name), -1)
        
        if selected_index == -1:
            error(f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin cho b·∫£n backup ƒë√£ ch·ªçn.")
            return None
            
        backup_info = backup_info_list[selected_index]
        info(f"üìÇ B·∫°n ƒë√£ ch·ªçn b·∫£n backup: {folder_name}")
        
        # Ki·ªÉm tra xem c√≥ file c·∫ßn thi·∫øt kh√¥ng
        if not backup_info.get("archive_file") and not backup_info.get("sql_file"):
            error(f"‚ùå Kh√¥ng t√¨m th·∫•y file backup (tar.gz ho·∫∑c sql) trong th∆∞ m·ª•c {folder_name}.")
            return None
        
        # Cho ng∆∞·ªùi d√πng ch·ªçn c√°c th√†nh ph·∫ßn ƒë·ªÉ kh√¥i ph·ª•c
        components = []
        
        if backup_info.get("archive_file"):
            components.append("M√£ ngu·ªìn website")
        
        if backup_info.get("sql_file"):
            components.append("Database")
        
        if not components:
            error("‚ùå Kh√¥ng c√≥ th√†nh ph·∫ßn n√†o ƒë·ªÉ kh√¥i ph·ª•c.")
            return None
        
        selected_components = checkbox(
            "üîÑ Ch·ªçn c√°c th√†nh ph·∫ßn ƒë·ªÉ kh√¥i ph·ª•c (d√πng ph√≠m space ƒë·ªÉ ch·ªçn):",
            choices=components
        ).ask()
        
        if not selected_components:
            info("ƒê√£ hu·ª∑ thao t√°c kh√¥i ph·ª•c backup.")
            return None
        
        # X√°c nh·∫≠n kh√¥i ph·ª•c
        if not confirm(f"‚ö†Ô∏è C·∫¢NH B√ÅO: Kh√¥i ph·ª•c s·∫Ω ghi ƒë√® l√™n d·ªØ li·ªáu hi·ªán t·∫°i c·ªßa website {domain}. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?").ask():
            info("ƒê√£ hu·ª∑ thao t√°c kh√¥i ph·ª•c backup.")
            return None
        
        # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën x√≥a database hi·ªán t·∫°i kh√¥ng n·∫øu c·∫ßn kh√¥i ph·ª•c database
        reset_db = False
        if "Database" in selected_components and backup_info.get("sql_file"):
            reset_db = confirm("üóëÔ∏è B·∫°n c√≥ mu·ªën x√≥a d·ªØ li·ªáu database hi·ªán t·∫°i tr∆∞·ªõc khi kh√¥i ph·ª•c?").ask()
        
        # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën kh·ªüi ƒë·ªông l·∫°i website kh√¥ng
        restart = confirm(f"üîÑ B·∫°n c√≥ mu·ªën kh·ªüi ƒë·ªông l·∫°i website {domain} sau khi kh√¥i ph·ª•c xong kh√¥ng?").ask()
        
        # Tr·∫£ v·ªÅ th√¥ng tin ƒë√£ thu th·∫≠p
        return {
            "domain": domain,
            "backup_info": backup_info,
            "selected_components": selected_components,
            "reset_db": reset_db,
            "restart": restart
        }
    
    def _process(self, inputs):
        """
        X·ª≠ l√Ω vi·ªác kh√¥i ph·ª•c backup d·ª±a tr√™n th√¥ng tin ƒë·∫ßu v√†o.
        
        Args:
            inputs: Dict ch·ª©a th√¥ng tin domain, backup, v√† th√†nh ph·∫ßn c·∫ßn kh√¥i ph·ª•c
            
        Returns:
            dict: K·∫øt qu·∫£ x·ª≠ l√Ω bao g·ªìm tr·∫°ng th√°i th√†nh c√¥ng v√† chi ti·∫øt kh√¥i ph·ª•c
        """
        domain = inputs["domain"]
        backup_info = inputs["backup_info"]
        selected_components = inputs["selected_components"]
        reset_db = inputs["reset_db"]
        restart = inputs["restart"]
        
        # Ti·∫øn h√†nh kh√¥i ph·ª•c
        info(f"üîÑ B·∫Øt ƒë·∫ßu qu√° tr√¨nh kh√¥i ph·ª•c backup cho website {domain}...")
        restore_success = True
        component_results = {}
        
        # Kh√¥i ph·ª•c database
        if "Database" in selected_components and backup_info.get("sql_file"):
            sql_file = backup_info["sql_file"]
            info(f"üíæ Kh√¥i ph·ª•c database t·ª´ file: {os.path.basename(sql_file)}")
            
            db_success = restore_database(domain, sql_file, reset_db)
            restore_success = restore_success and db_success
            component_results["database"] = {
                "success": db_success,
                "file": os.path.basename(sql_file),
                "reset": reset_db
            }
        
        # Kh√¥i ph·ª•c m√£ ngu·ªìn
        if "M√£ ngu·ªìn website" in selected_components and backup_info.get("archive_file"):
            archive_file = backup_info["archive_file"]
            info(f"üì¶ Kh√¥i ph·ª•c m√£ ngu·ªìn t·ª´ file: {os.path.basename(archive_file)}")
            
            # H·ªèi ng∆∞·ªùi d√πng x√°c nh·∫≠n
            if confirm(f"‚ö†Ô∏è Qu√° tr√¨nh n√†y s·∫Ω GHI ƒê√à l√™n t·∫•t c·∫£ file trong th∆∞ m·ª•c wordpress c·ªßa {domain}. Ti·∫øp t·ª•c?").ask():
                source_success = restore_source_code(domain, archive_file)
                restore_success = restore_success and source_success
                component_results["source_code"] = {
                    "success": source_success,
                    "file": os.path.basename(archive_file)
                }
            else:
                info("ƒê√£ hu·ª∑ thao t√°c kh√¥i ph·ª•c m√£ ngu·ªìn.")
                component_results["source_code"] = {
                    "success": False,
                    "cancelled": True
                }
        
        # Kh·ªüi ƒë·ªông l·∫°i website n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        restart_result = None
        if restore_success and restart:
            restart_result = restart_website(domain)
            component_results["restart"] = {
                "success": restart_result
            }
        
        # Tr·∫£ v·ªÅ k·∫øt qu·∫£
        return {
            "domain": domain,
            "restore_success": restore_success,
            "component_results": component_results,
            "backup_info": backup_info
        }
    
    def _show_results(self):
        """
        Hi·ªÉn th·ªã k·∫øt qu·∫£ kh√¥i ph·ª•c backup.
        
        S·ª≠ d·ª•ng self.result ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω.
        """
        if not self.result:
            return
        
        domain = self.result["domain"]
        restore_success = self.result["restore_success"]
        component_results = self.result["component_results"]
        
        # T·ªïng h·ª£p k·∫øt qu·∫£ v√† hi·ªÉn th·ªã
        if restore_success:
            success(f"üéâ ƒê√£ ho√†n t·∫•t kh√¥i ph·ª•c backup cho website {domain}.")
            
            # Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng th√†nh ph·∫ßn
            for component, result in component_results.items():
                if component == "database" and result["success"]:
                    info(f"  ‚úÖ Database: ƒê√£ kh√¥i ph·ª•c t·ª´ {result['file']}" + 
                         f" (ƒê√£ x√≥a d·ªØ li·ªáu c≈©: {'C√≥' if result['reset'] else 'Kh√¥ng'})")
                elif component == "source_code":
                    if result.get("cancelled"):
                        info(f"  ‚è© M√£ ngu·ªìn: ƒê√£ b·ªè qua theo y√™u c·∫ßu")
                    elif result["success"]:
                        info(f"  ‚úÖ M√£ ngu·ªìn: ƒê√£ kh√¥i ph·ª•c t·ª´ {result['file']}")
                elif component == "restart":
                    if result["success"]:
                        info(f"  ‚úÖ Website ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i th√†nh c√¥ng")
                    else:
                        warn(f"  ‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông l·∫°i website t·ª± ƒë·ªông. H√£y kh·ªüi ƒë·ªông l·∫°i th·ªß c√¥ng n·∫øu c·∫ßn.")
        else:
            error(f"‚ùå Qu√° tr√¨nh kh√¥i ph·ª•c backup g·∫∑p m·ªôt s·ªë l·ªói. Vui l√≤ng ki·ªÉm tra l·∫°i website {domain}.")
            
            # Hi·ªÉn th·ªã chi ti·∫øt l·ªói t·ª´ng th√†nh ph·∫ßn
            for component, result in component_results.items():
                if component == "database":
                    status = "‚úÖ Th√†nh c√¥ng" if result["success"] else "‚ùå Th·∫•t b·∫°i"
                    info(f"  ‚Ä¢ Database: {status}")
                elif component == "source_code":
                    if result.get("cancelled"):
                        info(f"  ‚Ä¢ M√£ ngu·ªìn: ‚è© ƒê√£ b·ªè qua theo y√™u c·∫ßu")
                    else:
                        status = "‚úÖ Th√†nh c√¥ng" if result["success"] else "‚ùå Th·∫•t b·∫°i"
                        info(f"  ‚Ä¢ M√£ ngu·ªìn: {status}")


# H√†m ti·ªán √≠ch ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©
@log_call
def prompt_restore_backup():
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ ch·∫°y prompt kh√¥i ph·ª•c backup.
    Duy tr√¨ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©.
    
    Returns:
        K·∫øt qu·∫£ t·ª´ qu√° tr√¨nh kh√¥i ph·ª•c ho·∫∑c None n·∫øu b·ªã h·ªßy
    """
    prompt = BackupRestorePrompt()
    return prompt.run()