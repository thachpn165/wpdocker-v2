"""
Module x·ª≠ l√Ω kh√¥i ph·ª•c backup website.
"""
from questionary import select, confirm, checkbox
import os
from core.backend.utils.debug import log_call, info, error, warn, debug, success
from core.backend.abc.prompt_base import PromptBase
from core.backend.modules.website.website_utils import select_website
from core.backend.modules.backup.backup_manager import BackupManager

class BackupRestorePrompt(PromptBase):
    """
    L·ªõp x·ª≠ l√Ω prompt kh√¥i ph·ª•c backup website.
    
    Tri·ªÉn khai l·ªõp tr·ª´u t∆∞·ª£ng PromptBase v·ªõi c√°c ph∆∞∆°ng th·ª©c:
    - _collect_inputs: Thu th·∫≠p th√¥ng tin domain, backup, v√† c√°c th√†nh ph·∫ßn c·∫ßn kh√¥i ph·ª•c
    - _process: Ti·∫øn h√†nh qu√° tr√¨nh kh√¥i ph·ª•c backup
    - _show_results: Hi·ªÉn th·ªã k·∫øt qu·∫£ kh√¥i ph·ª•c
    """
    
    def _collect_inputs(self):
        """
        Thu th·∫≠p ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng v·ªÅ website, backup, v√† c√°c th√†nh ph·∫ßn c·∫ßn kh√¥i ph·ª•c.
        
        Returns:
            dict: Ch·ª©a th√¥ng tin domain, backup, v√† c√°c tu·ª≥ ch·ªçn kh√¥i ph·ª•c ho·∫∑c None n·∫øu b·ªã h·ªßy
        """
        # Kh·ªüi t·∫°o BackupManager
        backup_manager = BackupManager()
        
        # Ch·ªçn m·ªôt website s·ª≠ d·ª•ng h√†m select_website c√≥ s·∫µn
        domain = select_website("üåê Ch·ªçn website ƒë·ªÉ kh√¥i ph·ª•c backup:")
        
        if not domain:
            # Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong h√†m select_website
            return None
        
        # Ch·ªçn n∆°i l∆∞u tr·ªØ backup
        storage_providers = backup_manager.get_available_providers()
        
        if not storage_providers:
            error("‚ùå Kh√¥ng t√¨m th·∫•y n∆°i l∆∞u tr·ªØ backup n√†o.")
            return None
        
        # Format provider options to be more user-friendly
        provider_choices = []
        for provider in storage_providers:
            if provider == "local":
                provider_choices.append({"name": "L∆∞u tr·ªØ local", "value": provider})
            elif provider.startswith("rclone:"):
                remote_name = provider.split(":")[1]
                provider_choices.append({"name": f"L∆∞u tr·ªØ ƒë√°m m√¢y ({remote_name})", "value": provider})
            else:
                provider_choices.append({"name": provider, "value": provider})
        
        selected_provider = select(
            "üíæ Ch·ªçn n∆°i l∆∞u tr·ªØ backup ƒë·ªÉ kh√¥i ph·ª•c:",
            choices=provider_choices
        ).ask()
        
        if not selected_provider:
            info("ƒê√£ hu·ª∑ thao t√°c kh√¥i ph·ª•c backup.")
            return None
        
        # L·∫•y danh s√°ch backup t·ª´ provider ƒë√£ ch·ªçn
        backups = backup_manager.list_backups(domain, selected_provider)
        
        if not backups:
            error(f"‚ùå Kh√¥ng t√¨m th·∫•y backup n√†o cho website {domain} trong {selected_provider}.")
            return None
        
        # Format backup list for display
        backup_choices = []
        for backup in backups:
            backup_type = "Database" if backup.get("type") == "database" else "Full backup"
            size = backup.get("size_formatted", "Unknown size")
            modified = backup.get("modified_formatted", "Unknown date")
            backup_choices.append({
                "name": f"{backup.get('name')} [{backup_type}] [{size}] [{modified}]",
                "value": backup
            })
        
        # Th√™m tu·ª≥ ch·ªçn hu·ª∑
        backup_choices.append({"name": "Hu·ª∑", "value": None})
        
        # Ch·ªçn m·ªôt backup ƒë·ªÉ kh√¥i ph·ª•c
        selected_backup = select(
            "üìÅ Ch·ªçn b·∫£n backup ƒë·ªÉ kh√¥i ph·ª•c:",
            choices=backup_choices
        ).ask()
        
        if not selected_backup:
            info("ƒê√£ hu·ª∑ thao t√°c kh√¥i ph·ª•c backup.")
            return None
        
        backup_name = selected_backup.get("name")
        backup_type = selected_backup.get("type")
        
        info(f"üìÇ B·∫°n ƒë√£ ch·ªçn b·∫£n backup: {backup_name}")
        
        # X√°c nh·∫≠n kh√¥i ph·ª•c
        if not confirm(f"‚ö†Ô∏è C·∫¢NH B√ÅO: Kh√¥i ph·ª•c s·∫Ω ghi ƒë√® l√™n d·ªØ li·ªáu hi·ªán t·∫°i c·ªßa website {domain}. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?").ask():
            info("ƒê√£ hu·ª∑ thao t√°c kh√¥i ph·ª•c backup.")
            return None
        
        # Tr·∫£ v·ªÅ th√¥ng tin ƒë√£ thu th·∫≠p
        return {
            "domain": domain,
            "backup": selected_backup,
            "provider": selected_provider
        }
    
    def _process(self, inputs):
        """
        X·ª≠ l√Ω vi·ªác kh√¥i ph·ª•c backup d·ª±a tr√™n th√¥ng tin ƒë·∫ßu v√†o.
        
        Args:
            inputs: Dict ch·ª©a th√¥ng tin domain, backup v√† provider
            
        Returns:
            dict: K·∫øt qu·∫£ x·ª≠ l√Ω bao g·ªìm tr·∫°ng th√°i th√†nh c√¥ng v√† chi ti·∫øt kh√¥i ph·ª•c
        """
        domain = inputs["domain"]
        backup = inputs["backup"]
        provider = inputs["provider"]
        
        # Kh·ªüi t·∫°o BackupManager
        backup_manager = BackupManager()
        
        # Ti·∫øn h√†nh kh√¥i ph·ª•c
        info(f"üîÑ B·∫Øt ƒë·∫ßu qu√° tr√¨nh kh√¥i ph·ª•c backup cho website {domain} t·ª´ {provider}...")
        
        backup_name = backup.get("name")
        backup_type = backup.get("type")
        
        # G·ªçi BackupManager ƒë·ªÉ restore backup
        success, message = backup_manager.restore_backup(
            domain, 
            backup_name, 
            provider
        )
        
        # Tr·∫£ v·ªÅ k·∫øt qu·∫£
        return {
            "domain": domain,
            "backup": backup,
            "provider": provider,
            "restore_success": success,
            "message": message
        }
    
    def _show_results(self):
        """
        Hi·ªÉn th·ªã k·∫øt qu·∫£ kh√¥i ph·ª•c backup.
        
        S·ª≠ d·ª•ng self.result ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω.
        """
        if not self.result:
            return
        
        domain = self.result["domain"]
        backup = self.result["backup"]
        provider = self.result["provider"]
        restore_success = self.result["restore_success"]
        message = self.result["message"]
        
        # Format provider name for display
        provider_display = provider
        if provider == "local":
            provider_display = "l∆∞u tr·ªØ local"
        elif provider.startswith("rclone:"):
            remote_name = provider.split(":")[1]
            provider_display = f"l∆∞u tr·ªØ ƒë√°m m√¢y ({remote_name})"
        
        # Format backup name for display
        backup_name = backup.get("name", "Unknown")
        backup_type = "Database" if backup.get("type") == "database" else "Full backup"
        
        # T·ªïng h·ª£p k·∫øt qu·∫£ v√† hi·ªÉn th·ªã
        if restore_success:
            success(f"üéâ ƒê√£ ho√†n t·∫•t kh√¥i ph·ª•c backup cho website {domain}.")
            info(f"‚úÖ ƒê√£ kh√¥i ph·ª•c t·ª´: {backup_name} [{backup_type}] t·ª´ {provider_display}")
        else:
            error(f"‚ùå Qu√° tr√¨nh kh√¥i ph·ª•c backup g·∫∑p l·ªói: {message}")
            info(f"‚ùå Kh√¥ng th·ªÉ kh√¥i ph·ª•c: {backup_name} [{backup_type}] t·ª´ {provider_display}")


# H√†m ti·ªán √≠ch ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©
@log_call
def prompt_restore_backup():
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ ch·∫°y prompt kh√¥i ph·ª•c backup.
    Duy tr√¨ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©.
    
    Returns:
        K·∫øt qu·∫£ t·ª´ qu√° tr√¨nh kh√¥i ph·ª•c ho·∫∑c None n·∫øu b·ªã h·ªßy
    """
    prompt = BackupRestorePrompt()
    return prompt.run()