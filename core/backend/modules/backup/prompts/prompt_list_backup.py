"""
Module hi·ªÉn th·ªã danh s√°ch c√°c b·∫£n backup c·ªßa website.
"""
import os
from rich.console import Console
from rich.table import Table
from rich.text import Text
from core.backend.utils.debug import log_call, info, error, warn, debug, success
from core.backend.abc.prompt_base import PromptBase
from core.backend.modules.website.website_utils import select_website
from core.backend.modules.backup.backup_restore import get_backup_folders, get_backup_info

class BackupListPrompt(PromptBase):
    """
    L·ªõp x·ª≠ l√Ω prompt hi·ªÉn th·ªã danh s√°ch backup c·ªßa website.
    
    Tri·ªÉn khai l·ªõp tr·ª´u t∆∞·ª£ng PromptBase v·ªõi c√°c ph∆∞∆°ng th·ª©c:
    - _collect_inputs: Thu th·∫≠p th√¥ng tin domain ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch backup
    - _process: L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ c√°c b·∫£n backup
    - _show_results: Hi·ªÉn th·ªã danh s√°ch backup d∆∞·ªõi d·∫°ng b·∫£ng
    """
    
    def _collect_inputs(self):
        """
        Thu th·∫≠p th√¥ng tin website ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch backup.
        
        Returns:
            dict: Ch·ª©a th√¥ng tin domain ho·∫∑c None n·∫øu b·ªã h·ªßy
        """
        # Ch·ªçn m·ªôt website s·ª≠ d·ª•ng h√†m select_website c√≥ s·∫µn
        domain = select_website("üåê Ch·ªçn website ƒë·ªÉ xem danh s√°ch backup:")
        
        if not domain:
            # Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong h√†m select_website
            return None
        
        return {"domain": domain}
    
    def _process(self, inputs):
        """
        L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ c√°c b·∫£n backup c·ªßa website.
        
        Args:
            inputs: Dict ch·ª©a th√¥ng tin domain
            
        Returns:
            dict: Th√¥ng tin chi ti·∫øt v·ªÅ c√°c b·∫£n backup
        """
        domain = inputs["domain"]
        
        # L·∫•y th√¥ng tin v·ªÅ c√°c th∆∞ m·ª•c backup
        backup_dir, backup_folders, last_backup_info = get_backup_folders(domain)
        
        if not backup_folders:
            return None  # Th√¥ng b√°o l·ªói ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong h√†m get_backup_folders
        
        # L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ t·ª´ng backup
        backup_info_list = []
        
        for folder in backup_folders:
            backup_info = get_backup_info(backup_dir, folder, last_backup_info)
            backup_info_list.append(backup_info)
        
        return {
            "domain": domain,
            "backup_dir": backup_dir,
            "backup_folders": backup_folders,
            "backup_info_list": backup_info_list,
            "last_backup_info": last_backup_info
        }
    
    def _show_results(self):
        """
        Hi·ªÉn th·ªã danh s√°ch backup d∆∞·ªõi d·∫°ng b·∫£ng.
        
        S·ª≠ d·ª•ng self.result ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω.
        """
        if not self.result:
            return
        
        domain = self.result["domain"]
        backup_dir = self.result["backup_dir"]
        backup_folders = self.result["backup_folders"]
        backup_info_list = self.result["backup_info_list"]
        last_backup_info = self.result["last_backup_info"]
        
        # T·∫°o b·∫£ng hi·ªÉn th·ªã v·ªõi th√¥ng tin chi ti·∫øt v·ªÅ c√°c b·∫£n backup
        console = Console()
        
        # Hi·ªÉn th·ªã header
        console.print(f"\n[bold cyan]üìä Danh s√°ch backup cho website: [yellow]{domain}[/yellow][/bold cyan]")
        console.print(f"[cyan]üìÅ Th∆∞ m·ª•c backup: [yellow]{backup_dir}[/yellow][/cyan]")
        console.print(f"[cyan]üî¢ T·ªïng s·ªë b·∫£n backup: [yellow]{len(backup_folders)}[/yellow][/cyan]")
        
        # Hi·ªÉn th·ªã th√¥ng tin b·∫£n backup g·∫ßn nh·∫•t t·ª´ c·∫•u h√¨nh (n·∫øu c√≥)
        if last_backup_info:
            console.print("\n[bold green]üíæ Th√¥ng tin b·∫£n backup g·∫ßn nh·∫•t t·ª´ c·∫•u h√¨nh:[/bold green]")
            console.print(f"[green]‚è±Ô∏è  Th·ªùi gian: [yellow]{last_backup_info.time}[/yellow][/green]")
            console.print(f"[green]üì¶ File m√£ ngu·ªìn: [yellow]{last_backup_info.file}[/yellow][/green]")
            console.print(f"[green]üóÑÔ∏è File database: [yellow]{last_backup_info.database}[/yellow][/green]")
        
        # T·∫°o b·∫£ng hi·ªÉn th·ªã chi ti·∫øt v·ªÅ c√°c b·∫£n backup
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("#", style="dim", width=4)
        table.add_column("T√™n backup", style="cyan")
        table.add_column("Th·ªùi gian t·∫°o", style="green")
        table.add_column("K√≠ch th∆∞·ªõc", style="yellow")
        table.add_column("Tr·∫°ng th√°i", style="magenta")
        
        # L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ m·ªói backup v√† ƒëi·ªÅn v√†o b·∫£ng
        for idx, backup_info in enumerate(backup_info_list, 1):
            if "error" in backup_info:
                # Th√™m d√≤ng v·ªõi th√¥ng tin l·ªói
                table.add_row(
                    str(idx),
                    backup_info.get("folder", "N/A"),
                    "L·ªói",
                    "L·ªói",
                    f"L·ªói: {backup_info['error']}"
                )
            else:
                # Th√™m d√≤ng v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
                status = "‚úÖ L√† b·∫£n backup g·∫ßn nh·∫•t" if backup_info["is_latest"] else ""
                
                table.add_row(
                    str(idx),
                    backup_info["folder"],
                    backup_info["time"],
                    backup_info["size"],
                    status
                )
        
        # Hi·ªÉn th·ªã b·∫£ng
        console.print("\n")
        console.print(table)
        
        # Hi·ªÉn th·ªã ch√∫ th√≠ch
        console.print("\n[dim]üìù Ch√∫ th√≠ch:[/dim]")
        console.print("[dim]- B·∫£ng ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ªùi gian t·∫°o (m·ªõi nh·∫•t l√™n ƒë·∫ßu)[/dim]")
        console.print("[dim]- K√≠ch th∆∞·ªõc hi·ªÉn th·ªã l√† t·ªïng k√≠ch th∆∞·ªõc c·ªßa t·∫•t c·∫£ file trong th∆∞ m·ª•c backup[/dim]")
        console.print("[dim]- Tr·∫°ng th√°i ‚úÖ cho bi·∫øt ƒë√¢y l√† b·∫£n backup g·∫ßn nh·∫•t ƒë∆∞·ª£c l∆∞u trong c·∫•u h√¨nh[/dim]")
        
        # ƒê·ª£i ng∆∞·ªùi d√πng nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


# H√†m ti·ªán √≠ch ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©
@log_call
def prompt_list_backup():
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch backup.
    Duy tr√¨ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©.
    
    Returns:
        K·∫øt qu·∫£ t·ª´ qu√° tr√¨nh hi·ªÉn th·ªã danh s√°ch ho·∫∑c None n·∫øu b·ªã h·ªßy
    """
    prompt = BackupListPrompt()
    return prompt.run()