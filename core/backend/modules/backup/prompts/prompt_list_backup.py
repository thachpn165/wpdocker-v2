from questionary import select
import os
import glob
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.text import Text
from core.backend.utils.debug import log_call, info, error, warn, debug, success
from core.backend.modules.website.website_utils import website_list, get_sites_dir
from core.backend.modules.website.website_utils import get_site_config

@log_call
def prompt_list_backup():
    """
    Hi·ªÉn th·ªã danh s√°ch c√°c b·∫£n backup c·ªßa website.
    Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt bao g·ªìm th·ªùi gian t·∫°o, k√≠ch th∆∞·ªõc, v√† c√°c file trong backup.
    """
    # L·∫•y danh s√°ch website
    websites = website_list()
    if not websites:
        error("‚ùå Kh√¥ng t√¨m th·∫•y website n√†o ƒë·ªÉ hi·ªÉn th·ªã backup.")
        return
    
    # Ch·ªçn m·ªôt website
    domain = select(
        "üåê Ch·ªçn website ƒë·ªÉ xem danh s√°ch backup:",
        choices=websites
    ).ask()
    
    if not domain:
        info("ƒê√£ hu·ª∑ thao t√°c xem danh s√°ch backup.")
        return
    
    # L·∫•y th∆∞ m·ª•c backups c·ªßa website
    sites_dir = get_sites_dir()
    backup_dir = os.path.join(sites_dir, domain, "backups")
    
    if not os.path.exists(backup_dir):
        error(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c backup cho website {domain}.")
        return
    
    # T√¨m t·∫•t c·∫£ c√°c th∆∞ m·ª•c backup trong th∆∞ m·ª•c backups
    backup_folders = [d for d in os.listdir(backup_dir) if os.path.isdir(os.path.join(backup_dir, d)) and d.startswith("backup_")]
    
    if not backup_folders:
        error(f"‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n backup n√†o cho website {domain}.")
        return
    
    # T·∫°o b·∫£ng hi·ªÉn th·ªã v·ªõi th√¥ng tin chi ti·∫øt v·ªÅ c√°c b·∫£n backup
    console = Console()
    
    # Hi·ªÉn th·ªã th√¥ng tin t·ªïng quan
    site_config = get_site_config(domain)
    last_backup_info = None
    if site_config and site_config.backup and site_config.backup.last_backup:
        last_backup_info = site_config.backup.last_backup
    
    # Hi·ªÉn th·ªã header
    console.print(f"\n[bold cyan]üìä Danh s√°ch backup cho website: [yellow]{domain}[/yellow][/bold cyan]")
    console.print(f"[cyan]üìÅ Th∆∞ m·ª•c backup: [yellow]{backup_dir}[/yellow][/cyan]")
    console.print(f"[cyan]üî¢ T·ªïng s·ªë b·∫£n backup: [yellow]{len(backup_folders)}[/yellow][/cyan]")
    
    # Hi·ªÉn th·ªã th√¥ng tin b·∫£n backup g·∫ßn nh·∫•t t·ª´ c·∫•u h√¨nh (n·∫øu c√≥)
    if last_backup_info:
        console.print("\n[bold green]üíæ Th√¥ng tin b·∫£n backup g·∫ßn nh·∫•t t·ª´ c·∫•u h√¨nh:[/bold green]")
        console.print(f"[green]‚è±Ô∏è  Th·ªùi gian: [yellow]{last_backup_info.time}[/yellow][/green]")
        console.print(f"[green]üì¶ File m√£ ngu·ªìn: [yellow]{last_backup_info.file}[/yellow][/green]")
        console.print(f"[green]üóÑÔ∏è File database: [yellow]{last_backup_info.database}[/yellow][/green]")
    
    # T·∫°o b·∫£ng hi·ªÉn th·ªã chi ti·∫øt v·ªÅ c√°c b·∫£n backup
    table = Table(show_header=True, header_style="bold magenta")
    table.add_column("#", style="dim", width=4)
    table.add_column("T√™n backup", style="cyan")
    table.add_column("Th·ªùi gian t·∫°o", style="green")
    table.add_column("K√≠ch th∆∞·ªõc", style="yellow")
    table.add_column("Tr·∫°ng th√°i", style="magenta")
    
    # S·∫Øp x·∫øp c√°c th∆∞ m·ª•c backup theo th·ªùi gian t·∫°o (m·ªõi nh·∫•t l√™n ƒë·∫ßu)
    backup_folders = sorted(
        backup_folders,
        key=lambda x: os.path.getctime(os.path.join(backup_dir, x)),
        reverse=True
    )
    
    # ƒêi·ªÅn th√¥ng tin v√†o b·∫£ng
    for idx, folder in enumerate(backup_folders, 1):
        folder_path = os.path.join(backup_dir, folder)
        
        # L·∫•y th·ªùi gian t·∫°o
        folder_time = datetime.fromtimestamp(os.path.getctime(folder_path))
        time_str = folder_time.strftime("%d/%m/%Y %H:%M:%S")
        
        # T√≠nh k√≠ch th∆∞·ªõc t·ªïng c·ªông
        total_size = 0
        for dirpath, dirnames, filenames in os.walk(folder_path):
            for f in filenames:
                fp = os.path.join(dirpath, f)
                if os.path.exists(fp):  # ƒê·∫£m b·∫£o file v·∫´n t·ªìn t·∫°i
                    total_size += os.path.getsize(fp)
        
        size_str = f"{total_size / (1024*1024):.2f} MB"
        
        # T√¨m c√°c file quan tr·ªçng trong th∆∞ m·ª•c backup (ƒë·ªÉ ki·ªÉm tra v·ªõi c·∫•u h√¨nh)
        # Ch√∫ng ta v·∫´n c·∫ßn code n√†y ƒë·ªÉ so s√°nh v·ªõi c·∫•u h√¨nh, nh∆∞ng s·∫Ω kh√¥ng hi·ªÉn th·ªã trong b·∫£ng
        files_list = []
        for file_pattern in ["*.sql", "*.tar.gz", "*.zip"]:
            matches = glob.glob(os.path.join(folder_path, file_pattern))
            for match in matches:
                file_name = os.path.basename(match)
                file_size = os.path.getsize(match) / (1024*1024)
                files_list.append(f"{file_name} ({file_size:.2f} MB)")
        
        # Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† backup g·∫ßn nh·∫•t trong c·∫•u h√¨nh kh√¥ng
        status = ""
        if last_backup_info:
            # Ki·ªÉm tra xem b·∫£n backup n√†y c√≥ ph·∫£i l√† b·∫£n g·∫ßn nh·∫•t trong c·∫•u h√¨nh kh√¥ng
            if last_backup_info.file and (last_backup_info.file.startswith(folder_path) or 
                                           (last_backup_info.database and last_backup_info.database.startswith(folder_path))):
                status = "‚úÖ L√† b·∫£n backup g·∫ßn nh·∫•t"
        
        # Th√™m d√≤ng v√†o b·∫£ng
        table.add_row(
            str(idx),
            folder,
            time_str,
            size_str,
            status
        )
    
    # Hi·ªÉn th·ªã b·∫£ng
    console.print("\n")
    console.print(table)
    
    # Hi·ªÉn th·ªã ch√∫ th√≠ch
    console.print("\n[dim]üìù Ch√∫ th√≠ch:[/dim]")
    console.print("[dim]- B·∫£ng ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ªùi gian t·∫°o (m·ªõi nh·∫•t l√™n ƒë·∫ßu)[/dim]")
    console.print("[dim]- K√≠ch th∆∞·ªõc hi·ªÉn th·ªã l√† t·ªïng k√≠ch th∆∞·ªõc c·ªßa t·∫•t c·∫£ file trong th∆∞ m·ª•c backup[/dim]")
    console.print("[dim]- Tr·∫°ng th√°i ‚úÖ cho bi·∫øt ƒë√¢y l√† b·∫£n backup g·∫ßn nh·∫•t ƒë∆∞·ª£c l∆∞u trong c·∫•u h√¨nh[/dim]")
    
    # ƒê·ª£i ng∆∞·ªùi d√πng nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c
    input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")