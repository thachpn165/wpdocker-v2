"""
Module x·ª≠ l√Ω kh√¥i ph·ª•c database cho website.
"""
from questionary import select, confirm
import os
from rich.text import Text
from core.backend.utils.debug import log_call, info, warn, error, success, debug
from core.backend.abc.prompt_base import PromptBase
from core.backend.modules.website.website_utils import select_website
from core.backend.modules.mysql.import_export import import_database
from core.backend.utils.env_utils import env


class DatabaseRestorePrompt(PromptBase):
    """
    L·ªõp x·ª≠ l√Ω prompt kh√¥i ph·ª•c database website.
    
    Tri·ªÉn khai l·ªõp tr·ª´u t∆∞·ª£ng PromptBase v·ªõi c√°c ph∆∞∆°ng th·ª©c:
    - _collect_inputs: Thu th·∫≠p th√¥ng tin domain, file backup v√† l·ª±a ch·ªçn reset
    - _process: Th·ª±c hi·ªán vi·ªác kh√¥i ph·ª•c database
    - _show_results: Hi·ªÉn th·ªã k·∫øt qu·∫£ kh√¥i ph·ª•c
    """
    
    def _collect_inputs(self):
        """
        Thu th·∫≠p ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng v·ªÅ website, file backup v√† l·ª±a ch·ªçn reset.
        
        Returns:
            dict: Ch·ª©a th√¥ng tin domain, file backup v√† l·ª±a ch·ªçn reset ho·∫∑c None n·∫øu b·ªã h·ªßy
        """
        # Ch·ªçn website ƒë·ªÉ kh√¥i ph·ª•c
        domain = select_website("üåê Ch·ªçn website ƒë·ªÉ kh√¥i ph·ª•c database:")
        if not domain:
            info("ƒê√£ hu·ª∑ thao t√°c.")
            return None

        # H·ªèi c√≥ mu·ªën xo√° d·ªØ li·ªáu hi·ªán t·∫°i kh√¥ng
        reset = confirm(
            "üóëÔ∏è B·∫°n c√≥ mu·ªën xo√° d·ªØ li·ªáu hi·ªán t·∫°i tr∆∞·ªõc khi kh√¥i ph·ª•c kh√¥ng?"
        ).ask()

        # H∆∞·ªõng d·∫´n chu·∫©n b·ªã file backup
        sites_dir = env.get("SITES_DIR", "/opt/wp-docker/data/sites")
        backup_path = os.path.join(sites_dir, domain, "backups")
        
        info(
            f"üìÅ Vui l√≤ng ƒë·∫£m b·∫£o file SQL ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong th∆∞ m·ª•c: {backup_path}"
        )

        # Ki·ªÉm tra th∆∞ m·ª•c backup ƒë√£ t·ªìn t·∫°i ch∆∞a
        if not os.path.exists(backup_path):
            os.makedirs(backup_path, exist_ok=True)
            success(f"‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c backup t·∫°i: {backup_path}")

        # X√°c nh·∫≠n ƒë√£ chu·∫©n b·ªã file
        if not confirm("‚ùì B·∫°n ƒë√£ ƒë·∫∑t file SQL v√†o th∆∞ m·ª•c backup ch∆∞a?").ask():
            info("ƒê√£ hu·ª∑ thao t√°c. H√£y chu·∫©n b·ªã file backup tr∆∞·ªõc.")
            return None

        # L·∫•y danh s√°ch c√°c file trong th∆∞ m·ª•c backup
        try:
            backup_files = [f for f in os.listdir(backup_path) if f.endswith('.sql')]
        except Exception as e:
            error(f"‚ùå Kh√¥ng th·ªÉ ƒë·ªçc th∆∞ m·ª•c backup: {e}")
            return None

        if not backup_files:
            error("‚ùå Kh√¥ng t√¨m th·∫•y file SQL n√†o trong th∆∞ m·ª•c backup.")
            return None

        # Ch·ªçn file ƒë·ªÉ kh√¥i ph·ª•c
        selected_file = select(
            "üì¶ Ch·ªçn file SQL ƒë·ªÉ kh√¥i ph·ª•c:",
            choices=backup_files
        ).ask()

        if not selected_file:
            info("ƒê√£ hu·ª∑ thao t√°c.")
            return None

        # ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file backup
        db_file = os.path.join(backup_path, selected_file)

        # X√°c nh·∫≠n kh√¥i ph·ª•c
        if not confirm(f"‚ö†Ô∏è X√°c nh·∫≠n kh√¥i ph·ª•c database cho {domain} t·ª´ file {selected_file}?").ask():
            info("ƒê√£ hu·ª∑ thao t√°c kh√¥i ph·ª•c.")
            return None

        return {
            "domain": domain,
            "db_file": db_file,
            "reset": reset,
            "file_name": selected_file
        }
    
    def _process(self, inputs):
        """
        Th·ª±c hi·ªán vi·ªác kh√¥i ph·ª•c database.
        
        Args:
            inputs: Dict ch·ª©a th√¥ng tin domain, file backup v√† l·ª±a ch·ªçn reset
            
        Returns:
            dict: K·∫øt qu·∫£ x·ª≠ l√Ω bao g·ªìm tr·∫°ng th√°i th√†nh c√¥ng v√† chi ti·∫øt kh√¥i ph·ª•c
        """
        domain = inputs["domain"]
        db_file = inputs["db_file"]
        reset = inputs["reset"]
        file_name = inputs["file_name"]
        
        try:
            # Kh√¥i ph·ª•c database
            import_database(domain, db_file, reset)
            
            return {
                "domain": domain,
                "success": True,
                "file_name": file_name,
                "reset": reset,
                "error": None
            }
        except Exception as e:
            error_msg = f"‚ùå L·ªói khi kh√¥i ph·ª•c database: {e}"
            error(error_msg)
            
            return {
                "domain": domain,
                "success": False,
                "file_name": file_name,
                "reset": reset,
                "error": str(e)
            }
    
    def _show_results(self):
        """
        Hi·ªÉn th·ªã k·∫øt qu·∫£ kh√¥i ph·ª•c database.
        
        S·ª≠ d·ª•ng self.result ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω.
        """
        if not self.result:
            return
        
        domain = self.result["domain"]
        success_status = self.result["success"]
        file_name = self.result["file_name"]
        reset = self.result["reset"]
        error_msg = self.result.get("error")
        
        if success_status:
            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v·ªõi th√¥ng tin chi ti·∫øt
            reset_text = "ƒë√£ x√≥a d·ªØ li·ªáu c≈©" if reset else "gi·ªØ nguy√™n d·ªØ li·ªáu c≈©"
            success_message = Text(f"‚úÖ ƒê√£ ho√†n th√†nh kh√¥i ph·ª•c database cho website {domain}.")
            success(success_message)
            
            info(f"üìä Th√¥ng tin kh√¥i ph·ª•c:")
            info(f"  ‚Ä¢ File SQL: {file_name}")
            info(f"  ‚Ä¢ D·ªØ li·ªáu c≈©: {reset_text}")
        else:
            # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            error_message = Text(f"‚ùå Kh√¥i ph·ª•c database cho website {domain} th·∫•t b·∫°i.")
            error(error_message)
            
            if error_msg:
                warn(f"‚ö†Ô∏è Chi ti·∫øt l·ªói: {error_msg}")


# H√†m ti·ªán √≠ch ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©
@log_call
def prompt_restore_database():
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ kh√¥i ph·ª•c database.
    Duy tr√¨ t∆∞∆°ng th√≠ch v·ªõi giao di·ªán c≈©.
    
    Returns:
        K·∫øt qu·∫£ t·ª´ qu√° tr√¨nh kh√¥i ph·ª•c database ho·∫∑c None n·∫øu b·ªã h·ªßy
    """
    prompt = DatabaseRestorePrompt()
    return prompt.run()