from core.backend.modules.php.extensions.registry import (
    get_extension_instance,
    EXTENSION_REGISTRY
)
from core.backend.modules.website.website_utils import get_site_config
from core.backend.utils.debug import info, warn


def install_php_extension(domain: str, extension_id: str):
    """C√†i ƒë·∫∑t 1 extension cho website v√† c·∫≠p nh·∫≠t config"""
    ext = get_extension_instance(extension_id)
    ext.install(domain)
    ext.update_config(domain)  
    ext.post_install(domain)

def php_restore_enabled_extensions(domain: str):
    """Kh√¥i ph·ª•c l·∫°i to√†n b·ªô extension PHP ƒë√£ ƒë∆∞·ª£c c√†i (d·ª±a theo config.json)"""
    site_config = get_site_config(domain)
    if not site_config or not site_config.php:
        warn(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh PHP cho website {domain}")
        return

    extensions = site_config.php.php_installed_extensions or []
    if not extensions:
        info(f"üí§ Website {domain} ch∆∞a c√≥ extension PHP n√†o ƒë∆∞·ª£c c√†i.")
        return

    info(f"üîÅ ƒêang kh√¥i ph·ª•c c√°c extension PHP cho {domain}...")
    for ext_id in extensions:
        try:
            if ext_id not in EXTENSION_REGISTRY:
                warn(f"‚ö†Ô∏è Extension '{ext_id}' kh√¥ng n·∫±m trong danh s√°ch h·ªó tr·ª£.")
                continue

            ext = get_extension_instance(ext_id)
            ext.install(domain)
            ext.update_config(domain)  
        except Exception as e:
            warn(f"‚ö†Ô∏è L·ªói khi c√†i extension '{ext_id}': {e}")
