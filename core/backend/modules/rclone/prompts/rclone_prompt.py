#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import inquirer
from typing import Dict, List, Optional, Tuple
from core.backend.utils.env_utils import get_env_value
from core.backend.modules.rclone.rclone_manager import RcloneManager
from core.backend.modules.rclone.config_manager import RcloneConfigManager
from core.backend.modules.rclone.utils import (
    validate_remote_type, 
    validate_remote_params,
    validate_raw_config,
    format_size,
    get_backup_filename,
    get_remote_type_display_name
)
from core.backend.utils.container_utils import convert_host_path_to_container
from core.backend.utils.debug import Debug


def prompt_manage_rclone():
    """Prompt for managing Rclone operations."""
    # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ
    print("\n" + "="*80)
    print("üå©Ô∏è  QU·∫¢N L√ù L∆ØU TR·ªÆ ƒê√ÅM M√ÇY (RCLONE)")
    print("="*80)
    print("Rclone cho ph√©p k·∫øt n·ªëi v√† sao l∆∞u d·ªØ li·ªáu t·ªõi nhi·ªÅu d·ªãch v·ª• l∆∞u tr·ªØ kh√°c nhau nh∆∞")
    print("Google Drive, Dropbox, S3, OneDrive, Box v√† nhi·ªÅu d·ªãch v·ª• kh√°c.")
    print("-"*80)
    
    # Danh s√°ch c√°c h√†nh ƒë·ªông v·ªõi emoji
    actions = [
        "üìã Danh s√°ch k·∫øt n·ªëi l∆∞u tr·ªØ ƒë√°m m√¢y",
        "‚ûï Th√™m k·∫øt n·ªëi l∆∞u tr·ªØ m·ªõi",
        "üîç Xem chi ti·∫øt k·∫øt n·ªëi",
        "‚ùå X√≥a k·∫øt n·ªëi",
        "‚¨ÜÔ∏è Sao l∆∞u l√™n ƒë√°m m√¢y",
        "‚¨áÔ∏è Kh√¥i ph·ª•c t·ª´ ƒë√°m m√¢y",
        "üìÅ Xem t·ªáp tin tr√™n ƒë√°m m√¢y",
        "‚¨ÖÔ∏è Quay l·∫°i menu ch√≠nh"
    ]
    
    questions = [
        inquirer.List(
            "action",
            message="Ch·ªçn thao t√°c:",
            choices=actions,
        ),
    ]
    
    answers = inquirer.prompt(questions)
    
    if answers:
        action = answers["action"]
        
        if "Danh s√°ch k·∫øt n·ªëi" in action:
            list_remotes()
        elif "Th√™m k·∫øt n·ªëi" in action:
            prompt_add_remote()
        elif "X√≥a k·∫øt n·ªëi" in action:
            prompt_remove_remote()
        elif "Xem chi ti·∫øt" in action:
            prompt_view_remote_details()
        elif "Sao l∆∞u" in action:
            prompt_backup_to_remote()
        elif "Kh√¥i ph·ª•c" in action:
            from core.backend.modules.backup.prompts.prompt_cloud_backup import prompt_restore_from_cloud
            prompt_restore_from_cloud()
        elif "Xem t·ªáp tin" in action:
            prompt_view_backup_files()
        elif "Quay l·∫°i" in action:
            return
    
    # Return to the Rclone management menu unless we're going back
    if answers and "Quay l·∫°i" not in answers["action"]:
        prompt_manage_rclone()


def list_remotes():
    """List all configured remotes."""
    rclone_manager = RcloneManager()
    config_manager = RcloneConfigManager()
    remotes = rclone_manager.list_remotes()
    
    if remotes:
        print("\nDanh s√°ch c√°c remote ƒë√£ c·∫•u h√¨nh:")
        print("=" * 80)
        print(f"{'T√™n':20} {'Lo·∫°i':30} {'Tr·∫°ng th√°i'}")
        print("-" * 80)
        
        for remote in remotes:
            # L·∫•y th√¥ng tin c·∫•u h√¨nh ƒë·ªÉ bi·∫øt lo·∫°i
            config = config_manager.get_remote_config(remote)
            remote_type = config.get("type", "unknown") if config else "unknown"
            
            # L·∫•y t√™n hi·ªÉn th·ªã th√¢n thi·ªán cho lo·∫°i remote
            display_type = get_remote_type_display_name(remote_type)
            
            # Ki·ªÉm tra k·∫øt n·ªëi (ƒë∆°n gi·∫£n l√† ƒë·ªÉ bi·∫øt remote c√≥ ho·∫°t ƒë·ªông)
            status = "‚úÖ S·∫µn s√†ng"
            print(f"{remote:20} {display_type:30} {status}")
        
        print("=" * 80)
    else:
        print("\nCh∆∞a c√≥ remote n√†o ƒë∆∞·ª£c c·∫•u h√¨nh.")
    
    input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


def prompt_add_remote():
    """Prompt for adding a new remote."""
    # Danh s√°ch c√°c lo·∫°i remote h·ªó tr·ª£ v·ªõi t√™n hi·ªÉn th·ªã th√¢n thi·ªán
    # S·∫Øp x·∫øp theo th·ª© t·ª± ph·ªï bi·∫øn
    remote_choices = [
        "Google Drive (drive)",
        "Dropbox (dropbox)",
        "Microsoft OneDrive (onedrive)",
        "Amazon S3 / Wasabi / DO Spaces (s3)",
        "Backblaze B2 (b2)",
        "Box (box)",
        "SFTP (sftp)",
        "FTP (ftp)",
        "WebDAV / Nextcloud / Owncloud (webdav)",
        "Azure Blob Storage (azureblob)",
        "Mega.nz (mega)",
        "pCloud (pcloud)",
        "OpenStack Swift (swift)",
        "Yandex Disk (yandex)",
        "Local Disk (local)"
    ]
    
    questions = [
        inquirer.Text("name", message="Nh·∫≠p t√™n cho remote:"),
        inquirer.List(
            "type_display",
            message="Ch·ªçn lo·∫°i d·ªãch v·ª• l∆∞u tr·ªØ:",
            choices=remote_choices,
        ),
    ]
    
    answers = inquirer.prompt(questions)
    
    if not answers:
        return
    
    remote_name = answers["name"]
    # Tr√≠ch xu·∫•t t√™n k·ªπ thu·∫≠t t·ª´ chu·ªói hi·ªÉn th·ªã (n·∫±m trong ngo·∫∑c)
    remote_type_match = answers["type_display"].split("(")[-1].split(")")[0]
    remote_type = remote_type_match if remote_type_match else "unknown"
    
    # Get parameters based on remote type
    params = prompt_remote_params(remote_type)
    
    if params:
        rclone_manager = RcloneManager()
        success = rclone_manager.add_remote(remote_name, remote_type, params)
        
        if success:
            print(f"\nRemote '{remote_name}' added successfully.")
        else:
            print(f"\nFailed to add remote '{remote_name}'.")
    
    input("\nPress Enter to continue...")



def prompt_remote_params(remote_type: str) -> Dict[str, str]:
    """Prompt for remote-specific parameters and provide detailed guidance."""
    params = {}
    
    # L·∫•y t√™n hi·ªÉn th·ªã th√¢n thi·ªán
    display_name = get_remote_type_display_name(remote_type)
    
    # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n chi ti·∫øt d·ª±a tr√™n lo·∫°i remote
    print("\n" + "="*80)
    print(f"H∆Ø·ªöNG D·∫™N THI·∫æT L·∫¨P CHO {display_name}")
    print("="*80)
    
    if remote_type == "s3":
        print("""
ƒê·ªÉ thi·∫øt l·∫≠p Amazon S3 ho·∫∑c d·ªãch v·ª• t∆∞∆°ng th√≠ch S3, b·∫°n c·∫ßn:

1. Access Key ID v√† Secret Access Key:
   - ƒê·ªëi v·ªõi AWS S3: T·∫°o t·∫°i https://console.aws.amazon.com/iam/
   - ƒê·ªëi v·ªõi Wasabi, DigitalOcean Spaces: T·∫°o trong control panel c·ªßa d·ªãch v·ª•

2. Region: Khu v·ª±c b·∫°n ƒë√£ ch·ªçn khi t·∫°o bucket
   - V√≠ d·ª•: us-east-1, eu-west-2, ap-southeast-1, v.v...

3. Endpoint (ch·ªâ c·∫ßn cho S3 t∆∞∆°ng th√≠ch):
   - Wasabi: s3.wasabisys.com ho·∫∑c s3.eu-central-1.wasabisys.com
   - DigitalOcean: nyc3.digitaloceanspaces.com (thay nyc3 b·∫±ng khu v·ª±c c·ªßa b·∫°n)
   - Cloudflare R2: <account-id>.r2.cloudflarestorage.com

T·∫•t c·∫£ th√¥ng tin n√†y c√≥ s·∫µn trong dashboard c·ªßa d·ªãch v·ª•.
""")
        questions = [
            inquirer.Text("provider", message="Provider (aws, wasabi, do, cloudflare, v.v...):"),
            inquirer.Text("access_key_id", message="Access Key ID:"),
            inquirer.Password("secret_access_key", message="Secret Access Key:"),
            inquirer.Text("region", message="Region:"),
            inquirer.Text("endpoint", message="Endpoint (cho non-AWS S3, ƒë·ªÉ tr·ªëng cho AWS):", default=""),
        ]
    
    elif remote_type == "b2":
        print("""
ƒê·ªÉ thi·∫øt l·∫≠p Backblaze B2, b·∫°n c·∫ßn:

1. Account ID v√† Application Key:
   - ƒêƒÉng nh·∫≠p v√†o Backblaze B2 t·∫°i https://secure.backblaze.com/b2_buckets.htm
   - T·∫°i dashboard, nh·∫•n "App Keys" trong menu b√™n tr√°i
   - T·∫°o m·ªôt Application Key m·ªõi v·ªõi quy·ªÅn truy c·∫≠p ph√π h·ª£p
   - L∆∞u √Ω: B·∫°n ch·ªâ th·∫•y Application Key m·ªôt l·∫ßn khi t·∫°o, h√£y l∆∞u l·∫°i ngay!

Application Key c√≥ th·ªÉ ƒë∆∞·ª£c gi·ªõi h·∫°n cho m·ªôt bucket c·ª• th·ªÉ ho·∫∑c to√†n b·ªô t√†i kho·∫£n.
""")
        questions = [
            inquirer.Text("account", message="Account ID:"),
            inquirer.Password("key", message="Application Key:"),
        ]
    
    elif remote_type in ["drive", "dropbox", "onedrive", "box", "mega", "pcloud"]:
        # Chia nh·ªè th√†nh nhi·ªÅu ƒëo·∫°n ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ v·ªõi ƒë·ªãnh d·∫°ng JSON trong f-string
        print(f"\n‚ö†Ô∏è QUAN TR·ªåNG - M√îI TR∆Ø·ªúNG VPS V√Ä SSH ‚ö†Ô∏è\n")
        print(f"{display_name} s·ª≠ d·ª•ng x√°c th·ª±c OAuth, y√™u c·∫ßu tr√¨nh duy·ªát web ƒë·ªÉ c·∫•p quy·ªÅn.")
        print("Khi s·ª≠ d·ª•ng qua SSH tr√™n VPS, b·∫°n n√™n t·∫°o c·∫•u h√¨nh Rclone tr√™n m√°y c·ª•c b·ªô tr∆∞·ªõc,")
        print("sau ƒë√≥ sao ch√©p c·∫•u h√¨nh l√™n VPS.\n")
        
        print("H∆∞·ªõng d·∫´n c√°ch thi·∫øt l·∫≠p:\n")
        print("1. C√†i ƒë·∫∑t Rclone tr√™n m√°y c·ª•c b·ªô c·ªßa b·∫°n (m√°y t√≠nh c√° nh√¢n):")
        print("   - T·∫£i t·∫°i: https://rclone.org/downloads/")
        print("   - Ho·∫∑c c√†i ƒë·∫∑t b·∫±ng terminal: curl https://rclone.org/install.sh | sudo bash\n")
        
        print("2. Ch·∫°y l·ªánh sau ƒë·ªÉ t·∫°o c·∫•u h√¨nh:")
        print("   - rclone config")
        print("   - Ch·ªçn \"New remote\" (n)")
        print("   - Nh·∫≠p t√™n remote (v√≠ d·ª•: \"mydrive\")")
        print(f"   - Ch·ªçn lo·∫°i \"{display_name}\" ({remote_type})")
        print("   - L√†m theo h∆∞·ªõng d·∫´n x√°c th·ª±c OAuth tr√™n tr√¨nh duy·ªát")
        print("   - Ho√†n t·∫•t thi·∫øt l·∫≠p\n")
        
        print("3. Sao ch√©p c·∫•u h√¨nh t·ª´ m√°y c·ª•c b·ªô l√™n VPS:")
        print("   - File c·∫•u h√¨nh th∆∞·ªùng n·∫±m ·ªü: ~/.config/rclone/rclone.conf")
        config_dir = get_env_value("CONFIG_DIR")
        print(f"   - S·ª≠ d·ª•ng l·ªánh: scp ~/.config/rclone/rclone.conf user@your_vps:/ƒë∆∞·ªùng-d·∫´n-t·ªõi/{config_dir}/rclone/rclone.conf\n")
        
        print("4. Ho·∫∑c sao ch√©p n·ªôi dung ph·∫ßn c·∫•u h√¨nh t·ª´ file rclone.conf tr√™n m√°y c·ª•c b·ªô ")
        print("   v√† d√°n v√†o b√™n d∆∞·ªõi (ƒë·ªãnh d·∫°ng ph·∫£i gi·ªëng nh∆∞ d∆∞·ªõi ƒë√¢y):\n")
        
        print("   [t√™n-remote]")
        print(f"   type = {remote_type}")
        print('   token = {"access_token":"xxx","token_type":"Bearer","refresh_token":"xxx","expiry":"date"}')
        print("   client_id = xxx")
        print("   client_secret = xxx")
        print("   ...")
        print("\nL·ª±a ch·ªçn:")
        questions = [
            inquirer.Confirm("manual_config", 
                message="B·∫°n ƒë√£ t·∫°o c·∫•u h√¨nh tr√™n m√°y c·ª•c b·ªô v√† mu·ªën nh·∫≠p c·∫•u h√¨nh th·ªß c√¥ng?", 
                default=True),
        ]
        
        answers = inquirer.prompt(questions)
        if not answers:
            return {}
            
        if answers.get("manual_config", False):
            # S·ª≠ d·ª•ng inquirer cho t·ªáp c·∫•u h√¨nh th·ªß c√¥ng
            print("\nüìã TH√äM C·∫§U H√åNH RCLONE TH·ª¶ C√îNG")
            print("="*80)
            print(f"ƒê·ªÉ th√™m {remote_type}, b·∫°n c·∫ßn chu·∫©n b·ªã c·∫•u h√¨nh t·ª´ file rclone.conf.")
            print("L∆ØU √ù QUAN TR·ªåNG:")
            print("1. Ch·ªâ d√πng c√°c d√≤ng c·∫•u h√¨nh, KH√îNG bao g·ªìm t√™n remote trong ngo·∫∑c vu√¥ng [xxx]")
            print("2. C·∫•u h√¨nh ph·∫£i c√≥ √≠t nh·∫•t d√≤ng token = {...}")
            print("="*80)
            
            # T·∫°o t√™n t·ªáp t·∫°m th·ªùi ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p c·∫•u h√¨nh
            import tempfile
            import subprocess
            
            # T·∫°o t·ªáp t·∫°m th·ªùi
            with tempfile.NamedTemporaryFile(suffix='.conf', delete=False, mode='w+') as temp_file:
                temp_path = temp_file.name
                # T·∫°o m·∫´u cho ng∆∞·ªùi d√πng
                temp_file.write(f"# D√°n c·∫•u h√¨nh {remote_type} d∆∞·ªõi ƒë√¢y, kh√¥ng bao g·ªìm t√™n remote [xxx]\n")
                temp_file.write(f"# V√≠ d·ª• cho {remote_type}:\n")
                temp_file.write(f"type = {remote_type}\n")
                temp_file.write('token = {"access_token":"***","token_type":"Bearer","refresh_token":"***","expiry":"***"}\n')
                temp_file.write("client_id = ***\n")
                temp_file.write("client_secret = ***\n")
                temp_file.write("# X√≥a c√°c d√≤ng n√†y v√† d√°n c·∫•u h√¨nh th·ª±c c·ªßa b·∫°n v√†o ƒë√¢y\n")
            
            print(f"\nSau khi m·ªü tr√¨nh so·∫°n th·∫£o:")
            print("- D√°n c·∫•u h√¨nh Rclone c·ªßa b·∫°n v√†o t·ªáp")
            print("- X√≥a c√°c d√≤ng h∆∞·ªõng d·∫´n (b·∫Øt ƒë·∫ßu b·∫±ng #)")
            print("- L∆∞u l·∫°i v√† ƒë√≥ng tr√¨nh so·∫°n th·∫£o ƒë·ªÉ ti·∫øp t·ª•c")
            
            # S·ª≠ d·ª•ng h√†m choose_editor ƒë·ªÉ ch·ªçn v√† m·ªü tr√¨nh so·∫°n th·∫£o
            from core.backend.utils.editor import choose_editor
            
            # Ch·ªçn tr√¨nh so·∫°n th·∫£o, s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng EDITOR l√†m gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c√≥
            default_editor = get_env_value("EDITOR")
            editor = choose_editor(default_editor)
            
            # N·∫øu ng∆∞·ªùi d√πng h·ªßy vi·ªác ch·ªçn editor
            if not editor:
                # X√≥a t·ªáp t·∫°m th·ªùi
                os.unlink(temp_path)
                print("\n‚ùå ƒê√£ h·ªßy nh·∫≠p c·∫•u h√¨nh.")
                return {}
                
            try:
                # M·ªü tr√¨nh so·∫°n th·∫£o ƒë√£ ch·ªçn
                subprocess.run([editor, temp_path], check=True)
                
                # ƒê·ªçc t·ªáp c·∫•u h√¨nh sau khi ng∆∞·ªùi d√πng ƒë√£ l∆∞u
                with open(temp_path, 'r') as f:
                    content = f.read()
                
                # L·ªçc c√°c d√≤ng c√≥ √Ω nghƒ©a, b·ªè qua comment v√† d√≤ng tr·ªëng
                raw_config_lines = []
                for line in content.split('\n'):
                    line = line.strip()
                    if line and not line.startswith('#'):
                        raw_config_lines.append(line)
                
                # X√≥a t·ªáp t·∫°m th·ªùi
                os.unlink(temp_path)
                
            except Exception as e:
                print(f"\n‚ùå L·ªói khi m·ªü tr√¨nh so·∫°n th·∫£o: {str(e)}")
                return {}
            
            # Ph√¢n t√≠ch c·∫•u h√¨nh
            if not raw_config_lines:
                print("\n‚ùå Kh√¥ng nh·∫≠p ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th·ª≠ l·∫°i sau.")
                return {}
                
            raw_config = "\n".join(raw_config_lines)
            
            # Validate the raw config
            if not validate_raw_config(raw_config, remote_type):
                print("\n‚ùå C·∫•u h√¨nh kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng.")
                print("ƒê·∫£m b·∫£o c·∫•u h√¨nh ch·ª©a √≠t nh·∫•t token v√† c√°c tham s·ªë c·∫ßn thi·∫øt kh√°c.")
                return {}
                
            # Ph√¢n t√≠ch th√†nh params
            config_params = {}
            for line in raw_config_lines:
                if "=" in line:
                    key, value = line.split("=", 1)
                    key = key.strip()
                    value = value.strip()
                    
                    if key != "type":  # Ch√∫ng ta ƒë√£ bi·∫øt lo·∫°i r·ªìi
                        config_params[key] = value
            
            print("\n‚úÖ ƒê√£ nh·∫≠n c·∫•u h√¨nh th·ªß c√¥ng th√†nh c√¥ng.")
            print(f"C·∫•u h√¨nh s·∫Ω ƒë∆∞·ª£c l∆∞u tr·ª±c ti·∫øp v√†o file rclone.conf cho '{remote_type}'.")
            print("C√†i ƒë·∫∑t n√†y s·∫Ω cho ph√©p b·∫°n s·ª≠ d·ª•ng d·ªãch v·ª• l∆∞u tr·ªØ ƒë√°m m√¢y m√† kh√¥ng c·∫ßn x√°c th·ª±c OAuth.")
            return config_params
        
        # N·∫øu ng∆∞·ªùi d√πng kh√¥ng mu·ªën c·∫•u h√¨nh th·ªß c√¥ng, tr·∫£ v·ªÅ m·ªôt t·ª´ ƒëi·ªÉn tr·ªëng
        return {}
    
    elif remote_type in ["sftp", "ftp"]:
        print(f"""
ƒê·ªÉ thi·∫øt l·∫≠p k·∫øt n·ªëi {remote_type.upper()}, b·∫°n c·∫ßn:

1. Th√¥ng tin m√°y ch·ªß:
   - Host: ƒê·ªãa ch·ªâ IP ho·∫∑c t√™n mi·ªÅn c·ªßa m√°y ch·ªß
   - Port: C·ªïng k·∫øt n·ªëi (m·∫∑c ƒë·ªãnh l√† 22 cho SFTP, 21 cho FTP)

2. Th√¥ng tin ƒëƒÉng nh·∫≠p:
   - Username: T√™n ng∆∞·ªùi d√πng tr√™n m√°y ch·ªß
   - Password: M·∫≠t kh·∫©u (c√≥ th·ªÉ ƒë·ªÉ tr·ªëng n·∫øu s·ª≠ d·ª•ng key-based authentication cho SFTP)

ƒê·ªëi v·ªõi SFTP, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng x√°c th·ª±c b·∫±ng key thay v√¨ m·∫≠t kh·∫©u.
""")
        questions = [
            inquirer.Text("host", message="Host (ƒë·ªãa ch·ªâ m√°y ch·ªß):"),
            inquirer.Text("user", message="Username:"),
            inquirer.Password("pass", message="Password (ƒë·ªÉ tr·ªëng cho key-based auth):", default=""),
            inquirer.Text("port", message=f"Port (m·∫∑c ƒë·ªãnh: {'22' if remote_type == 'sftp' else '21'}):", default=""),
        ]
    
    elif remote_type == "webdav":
        print("""
ƒê·ªÉ thi·∫øt l·∫≠p WebDAV, b·∫°n c·∫ßn:

1. URL c·ªßa m√°y ch·ªß WebDAV:
   - Nextcloud/Owncloud: https://your-cloud.com/remote.php/webdav/
   - SharePoint: https://your-sharepoint.com/sites/your-site/_api/web/getfolderbyserverrelativeurl('/shared%20documents')/files
   - C√°c d·ªãch v·ª• kh√°c: Tham kh·∫£o t√†i li·ªáu c·ªßa d·ªãch v·ª• ƒë√≥

2. Th√¥ng tin ƒëƒÉng nh·∫≠p:
   - Username: T√™n ng∆∞·ªùi d√πng WebDAV
   - Password: M·∫≠t kh·∫©u WebDAV

ƒê·ªëi v·ªõi Nextcloud/Owncloud, b·∫°n c√≥ th·ªÉ t·∫°o App Passwords trong ph·∫ßn Security.
""")
        questions = [
            inquirer.Text("url", message="WebDAV URL:"),
            inquirer.Text("user", message="Username:"),
            inquirer.Password("pass", message="Password:"),
        ]
    
    elif remote_type == "azureblob":
        print("""
ƒê·ªÉ thi·∫øt l·∫≠p Azure Blob Storage, b·∫°n c·∫ßn:

1. Account Name:
   - T√¨m trong portal Azure d∆∞·ªõi m·ª•c Storage Accounts

2. Account Key ho·∫∑c SAS URL:
   - Account Key: Xem trong ph·∫ßn "Access keys" c·ªßa Storage Account
   - SAS URL: C√≥ th·ªÉ t·∫°o trong "Shared access signature" c·ªßa Storage Account

B·∫°n c√≥ th·ªÉ t√¨m th√¥ng tin n√†y trong Azure Portal: https://portal.azure.com/
""")
        questions = [
            inquirer.Text("account", message="Storage Account Name:"),
            inquirer.Password("key", message="Account Key:"),
        ]
    
    elif remote_type in ["sftp", "ftp"]:
        print(f"""
ƒê·ªÉ thi·∫øt l·∫≠p k·∫øt n·ªëi {remote_type.upper()}, b·∫°n c·∫ßn:

1. Th√¥ng tin m√°y ch·ªß:
   - Host: ƒê·ªãa ch·ªâ IP ho·∫∑c t√™n mi·ªÅn c·ªßa m√°y ch·ªß
   - Port: C·ªïng k·∫øt n·ªëi (m·∫∑c ƒë·ªãnh l√† 22 cho SFTP, 21 cho FTP)

2. Th√¥ng tin ƒëƒÉng nh·∫≠p:
   - Username: T√™n ng∆∞·ªùi d√πng tr√™n m√°y ch·ªß
   - Password: M·∫≠t kh·∫©u (c√≥ th·ªÉ ƒë·ªÉ tr·ªëng n·∫øu s·ª≠ d·ª•ng key-based authentication cho SFTP)

ƒê·ªëi v·ªõi SFTP, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng x√°c th·ª±c b·∫±ng key thay v√¨ m·∫≠t kh·∫©u.
""")
        questions = [
            inquirer.Text("host", message="Host (ƒë·ªãa ch·ªâ m√°y ch·ªß):"),
            inquirer.Text("user", message="Username:"),
            inquirer.Password("pass", message="Password (ƒë·ªÉ tr·ªëng cho key-based auth):", default=""),
            inquirer.Text("port", message=f"Port (m·∫∑c ƒë·ªãnh: {'22' if remote_type == 'sftp' else '21'}):", default=""),
        ]
    
    elif remote_type == "webdav":
        print("""
ƒê·ªÉ thi·∫øt l·∫≠p WebDAV, b·∫°n c·∫ßn:

1. URL c·ªßa m√°y ch·ªß WebDAV:
   - Nextcloud/Owncloud: https://your-cloud.com/remote.php/webdav/
   - SharePoint: https://your-sharepoint.com/sites/your-site/_api/web/getfolderbyserverrelativeurl('/shared%20documents')/files
   - C√°c d·ªãch v·ª• kh√°c: Tham kh·∫£o t√†i li·ªáu c·ªßa d·ªãch v·ª• ƒë√≥

2. Th√¥ng tin ƒëƒÉng nh·∫≠p:
   - Username: T√™n ng∆∞·ªùi d√πng WebDAV
   - Password: M·∫≠t kh·∫©u WebDAV

ƒê·ªëi v·ªõi Nextcloud/Owncloud, b·∫°n c√≥ th·ªÉ t·∫°o App Passwords trong ph·∫ßn Security.
""")
        questions = [
            inquirer.Text("url", message="WebDAV URL:"),
            inquirer.Text("user", message="Username:"),
            inquirer.Password("pass", message="Password:"),
        ]
    
    elif remote_type == "azureblob":
        print("""
ƒê·ªÉ thi·∫øt l·∫≠p Azure Blob Storage, b·∫°n c·∫ßn:

1. Account Name:
   - T√¨m trong portal Azure d∆∞·ªõi m·ª•c Storage Accounts

2. Account Key ho·∫∑c SAS URL:
   - Account Key: Xem trong ph·∫ßn "Access keys" c·ªßa Storage Account
   - SAS URL: C√≥ th·ªÉ t·∫°o trong "Shared access signature" c·ªßa Storage Account

B·∫°n c√≥ th·ªÉ t√¨m th√¥ng tin n√†y trong Azure Portal: https://portal.azure.com/
""")
        questions = [
            inquirer.Text("account", message="Storage Account Name:"),
            inquirer.Password("key", message="Account Key:"),
        ]
    
    else:
        print(f"""
ƒê·ªëi v·ªõi {remote_type}, ch√∫ng t√¥i s·∫Ω s·ª≠ d·ª•ng qu√° tr√¨nh c·∫•u h√¨nh t∆∞∆°ng t√°c.

ƒê·ªÉ bi·∫øt th√™m chi ti·∫øt v·ªÅ c√°ch thi·∫øt l·∫≠p {remote_type}, vui l√≤ng tham kh·∫£o:
https://rclone.org/docs/#{remote_type}

Sau khi ti·∫øp t·ª•c, h·ªá th·ªëng s·∫Ω h∆∞·ªõng d·∫´n b·∫°n qua quy tr√¨nh thi·∫øt l·∫≠p.
""")
        return {}
    
    print("\nSau khi nh·∫≠p th√¥ng tin, rclone c√≥ th·ªÉ y√™u c·∫ßu x√°c th·ª±c b·ªï sung qua tr√¨nh duy·ªát web.")
    print("Vui l√≤ng l√†m theo h∆∞·ªõng d·∫´n hi·ªÉn th·ªã tr√™n m√†n h√¨nh khi ƒë∆∞·ª£c nh·∫Øc.")
    print("="*80 + "\n")
    
    answers = inquirer.prompt(questions)
    
    if answers:
        # Filter out empty values
        return {k: v for k, v in answers.items() if v}
    
    return {}


def prompt_remove_remote():
    """Prompt for removing a remote."""
    rclone_manager = RcloneManager()
    config_manager = RcloneConfigManager()
    remotes = rclone_manager.list_remotes()
    
    if not remotes:
        print("\nCh∆∞a c√≥ remote n√†o ƒë∆∞·ª£c c·∫•u h√¨nh.")
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
        return
    
    # T·∫°o danh s√°ch l·ª±a ch·ªçn v·ªõi th√¥ng tin th√™m v·ªÅ lo·∫°i remote
    display_choices = []
    for remote in remotes:
        config = config_manager.get_remote_config(remote)
        remote_type = config.get("type", "unknown") if config else "unknown"
        display_type = get_remote_type_display_name(remote_type)
        display_choices.append(f"{remote} ({display_type})")
    
    # Th√™m l·ª±a ch·ªçn hu·ª∑
    display_choices.append("Hu·ª∑")
    
    questions = [
        inquirer.List(
            "remote_display",
            message="Ch·ªçn remote ƒë·ªÉ xo√°:",
            choices=display_choices,
        ),
    ]
    
    answers = inquirer.prompt(questions)
    
    if not answers or answers["remote_display"] == "Hu·ª∑":
        return
    
    # Tr√≠ch xu·∫•t t√™n remote t·ª´ chu·ªói hi·ªÉn th·ªã (tr∆∞·ªõc d·∫•u ngo·∫∑c ƒë·∫ßu ti√™n)
    remote_name = answers["remote_display"].split(" (")[0]
    
    # Hi·ªÉn th·ªã c·∫£nh b√°o r√µ r√†ng v·ªõi th√¥ng tin v·ªÅ remote
    config = config_manager.get_remote_config(remote_name)
    if config:
        remote_type = config.get("type", "unknown")
        display_type = get_remote_type_display_name(remote_type)
        print(f"\n‚ö†Ô∏è  C·∫¢NH B√ÅO: B·∫°n s·∫Øp xo√° remote '{remote_name}' ({display_type}).")
        print("    H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c v√† s·∫Ω xo√° c·∫•u h√¨nh li√™n k·∫øt v·ªõi d·ªãch v·ª• n√†y.")
        print("    D·ªØ li·ªáu tr√™n d·ªãch v·ª• l∆∞u tr·ªØ kh√¥ng b·ªã ·∫£nh h∆∞·ªüng.")
    
    confirm = inquirer.prompt([
        inquirer.Confirm("confirm", message=f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° '{remote_name}'?", default=False)
    ])
    
    if confirm and confirm["confirm"]:
        success = rclone_manager.remove_remote(remote_name)
        
        if success:
            print(f"\n‚úÖ Remote '{remote_name}' ƒë√£ ƒë∆∞·ª£c xo√° th√†nh c√¥ng.")
        else:
            print(f"\n‚ùå L·ªói khi xo√° remote '{remote_name}'.")
    
    input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


def prompt_view_remote_details():
    """Prompt for viewing remote details."""
    rclone_manager = RcloneManager()
    config_manager = RcloneConfigManager()
    remotes = rclone_manager.list_remotes()
    
    if not remotes:
        print("\nCh∆∞a c√≥ remote n√†o ƒë∆∞·ª£c c·∫•u h√¨nh.")
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
        return
    
    # T·∫°o danh s√°ch l·ª±a ch·ªçn v·ªõi th√¥ng tin th√™m v·ªÅ lo·∫°i remote
    display_choices = []
    for remote in remotes:
        config = config_manager.get_remote_config(remote)
        remote_type = config.get("type", "unknown") if config else "unknown"
        display_type = get_remote_type_display_name(remote_type)
        display_choices.append(f"{remote} ({display_type})")
    
    # Th√™m l·ª±a ch·ªçn hu·ª∑
    display_choices.append("Hu·ª∑")
    
    questions = [
        inquirer.List(
            "remote_display",
            message="Ch·ªçn remote ƒë·ªÉ xem chi ti·∫øt:",
            choices=display_choices,
        ),
    ]
    
    answers = inquirer.prompt(questions)
    
    if not answers or answers["remote_display"] == "Hu·ª∑":
        return
        
    # Tr√≠ch xu·∫•t t√™n remote t·ª´ chu·ªói hi·ªÉn th·ªã (tr∆∞·ªõc d·∫•u ngo·∫∑c ƒë·∫ßu ti√™n)
    remote_name = answers["remote_display"].split(" (")[0]
    config = config_manager.get_remote_config(remote_name)
    
    if config:
        remote_type = config.get("type", "unknown")
        display_type = get_remote_type_display_name(remote_type)
        
        print(f"\nChi ti·∫øt c·∫•u h√¨nh cho remote '{remote_name}' ({display_type}):")
        print("=" * 80)
        
        # Hi·ªÉn th·ªã th√¥ng tin ƒë∆∞·ª£c nh√≥m l·∫°i
        # Nh√≥m 1: Th√¥ng tin c∆° b·∫£n
        print("TH√îNG TIN C∆† B·∫¢N:")
        print(f"  T√™n: {remote_name}")
        print(f"  Lo·∫°i: {display_type}")
        
        # Nh√≥m 2: Th√¥ng tin k·∫øt n·ªëi v√† x√°c th·ª±c
        print("\nTH√îNG TIN K·∫æT N·ªêI:")
        for key, value in config.items():
            if key == "type":
                continue  # ƒê√£ hi·ªÉn th·ªã ·ªü tr√™n
                
            # Hi·ªÉn th·ªã nh√£n th√¢n thi·ªán cho c√°c tr∆∞·ªùng
            key_display = {
                "provider": "Nh√† cung c·∫•p",
                "access_key_id": "Access Key ID",
                "region": "V√πng",
                "endpoint": "Endpoint",
                "account": "T√†i kho·∫£n",
                "user": "T√™n ng∆∞·ªùi d√πng",
                "host": "M√°y ch·ªß",
                "port": "C·ªïng k·∫øt n·ªëi",
                "url": "URL"
            }.get(key, key)
            
            # ·∫®n th√¥ng tin nh·∫°y c·∫£m
            if key in ["secret", "key", "pass", "password", "secret_access_key", "client_secret"]:
                value = "********"
                key_display = f"{key_display} (ƒë√£ ·∫©n)"
                
            print(f"  {key_display}: {value}")
        
        print("=" * 80)
        
        # Th√™m th√¥ng tin s·ª≠ d·ª•ng
        used_space = "Kh√¥ng x√°c ƒë·ªãnh"  # Trong th·ª±c t·∫ø, b·∫°n c√≥ th·ªÉ g·ªçi rclone ƒë·ªÉ l·∫•y th√¥ng tin n√†y
        print(f"\nL∆∞u √Ω: ƒê√¢y l√† th√¥ng tin c·∫•u h√¨nh c·ªßa remote. ƒê·ªÉ qu·∫£n l√Ω d·ªØ li·ªáu,")
        print(f"h√£y s·ª≠ d·ª•ng c√°c t√πy ch·ªçn kh√°c nh∆∞ 'View backup files' ho·∫∑c 'Backup to remote'.")
    else:
        print(f"\nKh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt cho remote '{remote_name}'.")
    
    input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


def prompt_backup_to_remote():
    """Prompt for backing up data to a remote."""
    rclone_manager = RcloneManager()
    config_manager = RcloneConfigManager()
    remotes = rclone_manager.list_remotes()
    
    if not remotes:
        print("\nCh∆∞a c√≥ remote n√†o ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th√™m remote tr∆∞·ªõc.")
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
        return
    
    # T·∫°o danh s√°ch l·ª±a ch·ªçn v·ªõi th√¥ng tin th√™m v·ªÅ lo·∫°i remote
    display_choices = []
    for remote in remotes:
        config = config_manager.get_remote_config(remote)
        remote_type = config.get("type", "unknown") if config else "unknown"
        display_type = get_remote_type_display_name(remote_type)
        display_choices.append(f"{remote} ({display_type})")
    
    # Th√™m l·ª±a ch·ªçn hu·ª∑
    display_choices.append("Hu·ª∑")
    
    questions = [
        inquirer.List(
            "remote_display",
            message="Ch·ªçn remote ƒë√≠ch:",
            choices=display_choices,
        ),
    ]
    
    answers = inquirer.prompt(questions)
    
    if not answers or answers["remote_display"] == "Hu·ª∑":
        return
    
    # Tr√≠ch xu·∫•t t√™n remote t·ª´ chu·ªói hi·ªÉn th·ªã (tr∆∞·ªõc d·∫•u ngo·∫∑c ƒë·∫ßu ti√™n)
    remote_name = answers["remote_display"].split(" (")[0]
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng mu·ªën sao l∆∞u cho trang web c·ª• th·ªÉ hay kh√¥ng
    site_backup_question = [
        inquirer.Confirm(
            "use_domain",
            message="B·∫°n mu·ªën sao l∆∞u cho m·ªôt trang web c·ª• th·ªÉ?",
            default=True
        )
    ]
    
    site_backup_answer = inquirer.prompt(site_backup_question)
    if not site_backup_answer:
        return
    
    domain = None
    if site_backup_answer.get("use_domain", True):
        # Hi·ªÉn th·ªã c√°c domain s·∫µn c√≥ n·∫øu SITES_DIR t·ªìn t·∫°i
        sites_dir = get_env_value("SITES_DIR")
        if sites_dir and os.path.exists(sites_dir):
            available_domains = [d for d in os.listdir(sites_dir) if os.path.isdir(os.path.join(sites_dir, d))]
            
            if available_domains:
                domain_question = [
                    inquirer.List(
                        "domain",
                        message="Ch·ªçn trang web ƒë·ªÉ sao l∆∞u:",
                        choices=available_domains + ["T·ª± nh·∫≠p t√™n mi·ªÅn kh√°c"]
                    )
                ]
                
                domain_answer = inquirer.prompt(domain_question)
                if not domain_answer:
                    return
                
                if domain_answer["domain"] == "T·ª± nh·∫≠p t√™n mi·ªÅn kh√°c":
                    custom_domain_question = [
                        inquirer.Text(
                            "custom_domain",
                            message="Nh·∫≠p t√™n mi·ªÅn c·ªßa trang web:"
                        )
                    ]
                    
                    custom_domain_answer = inquirer.prompt(custom_domain_question)
                    if not custom_domain_answer:
                        return
                    
                    domain = custom_domain_answer["custom_domain"]
                else:
                    domain = domain_answer["domain"]
            else:
                # Kh√¥ng c√≥ domain, y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p
                domain_input_question = [
                    inquirer.Text(
                        "domain_input",
                        message="Nh·∫≠p t√™n mi·ªÅn c·ªßa trang web c·∫ßn sao l∆∞u:"
                    )
                ]
                
                domain_input_answer = inquirer.prompt(domain_input_question)
                if not domain_input_answer:
                    return
                
                domain = domain_input_answer["domain_input"]
        else:
            # Kh√¥ng c√≥ SITES_DIR ho·∫∑c th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i, y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p
            domain_input_question = [
                inquirer.Text(
                    "domain_input",
                    message="Nh·∫≠p t√™n mi·ªÅn c·ªßa trang web c·∫ßn sao l∆∞u:"
                )
            ]
            
            domain_input_answer = inquirer.prompt(domain_input_question)
            if not domain_input_answer:
                return
            
            domain = domain_input_answer["domain_input"]
    
    # S·ª≠ d·ª•ng c√°c ƒë∆∞·ªùng d·∫´n ti√™u chu·∫©n
    if domain:
        # ƒê∆∞·ªùng d·∫´n ngu·ªìn ti√™u chu·∫©n
        sites_dir = get_env_value("SITES_DIR")
        source = os.path.join(sites_dir, domain, "wordpress")
        
        # Ki·ªÉm tra th∆∞ m·ª•c wordpress c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(source):
            # Th·ª≠ th∆∞ m·ª•c www n·∫øu wordpress kh√¥ng t·ªìn t·∫°i
            www_dir = os.path.join(sites_dir, domain, "www")
            if os.path.exists(www_dir):
                source = www_dir
                print(f"\n‚ö†Ô∏è Th∆∞ m·ª•c wordpress kh√¥ng t·ªìn t·∫°i, s·ª≠ d·ª•ng th∆∞ m·ª•c www thay th·∫ø.")
            else:
                # S·ª≠ d·ª•ng th∆∞ m·ª•c g·ªëc c·ªßa domain
                source = os.path.join(sites_dir, domain)
                print(f"\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c wordpress ho·∫∑c www, s·ª≠ d·ª•ng th∆∞ m·ª•c g·ªëc c·ªßa trang web.")
        
        # ƒê∆∞·ªùng d·∫´n ƒë√≠ch ti√™u chu·∫©n tr√™n remote
        destination = f"backups/{domain}"
        
        print(f"\nTh√¥ng tin sao l∆∞u cho trang web: {domain}")
        print(f"Ngu·ªìn: {source}")
        print(f"ƒê√≠ch: {remote_name}:{destination}")
    else:
        print("\n‚ùå C·∫ßn ch·ªçn m·ªôt trang web c·ª• th·ªÉ ƒë·ªÉ sao l∆∞u.")
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
        return
    
    # Confirm backup operation
    confirm = inquirer.prompt([
        inquirer.Confirm(
            "confirm", 
            message=f"Sao l∆∞u '{domain}' l√™n '{remote_name}:{destination}'?", 
            default=False
        )
    ])
    
    if confirm and confirm["confirm"]:
        print(f"\n‚è≥ ƒêang b·∫Øt ƒë·∫ßu sao l∆∞u l√™n '{remote_name}'...")
        
        # Create remote directory structure first - rclone mkdir doesn't support -p
        remote_path_components = destination.split('/')
        current_path = ""
        
        for component in remote_path_components:
            if component:
                current_path = f"{current_path}/{component}" if current_path else component
                mkdir_success, mkdir_message = rclone_manager.execute_command(
                    ["mkdir", f"{remote_name}:{current_path}"]
                )
                # Don't show a warning if the directory already exists
                if not mkdir_success and "already exists" not in mkdir_message.lower():
                    print(f"\n‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c '{current_path}': {mkdir_message}")
            
        # Execute backup
        success, output = rclone_manager.backup(source, remote_name, destination, domain)
        
        if success:
            print(f"\n‚úÖ Sao l∆∞u ho√†n t·∫•t th√†nh c√¥ng.")
        else:
            print(f"\n‚ùå Sao l∆∞u th·∫•t b·∫°i: {output}")
    
    input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")




def prompt_view_backup_files():
    """Prompt for viewing backup files on a remote."""
    rclone_manager = RcloneManager()
    config_manager = RcloneConfigManager()
    remotes = rclone_manager.list_remotes()
    
    if not remotes:
        print("\nCh∆∞a c√≥ remote n√†o ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th√™m remote tr∆∞·ªõc.")
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
        return
    
    # T·∫°o danh s√°ch l·ª±a ch·ªçn v·ªõi th√¥ng tin th√™m v·ªÅ lo·∫°i remote
    display_choices = []
    for remote in remotes:
        config = config_manager.get_remote_config(remote)
        remote_type = config.get("type", "unknown") if config else "unknown"
        display_type = get_remote_type_display_name(remote_type)
        display_choices.append(f"{remote} ({display_type})")
    
    # Th√™m l·ª±a ch·ªçn hu·ª∑
    display_choices.append("Hu·ª∑")
    
    questions = [
        inquirer.List(
            "remote_display",
            message="Ch·ªçn remote ƒë·ªÉ xem t·ªáp tin:",
            choices=display_choices,
        ),
    ]
    
    answers = inquirer.prompt(questions)
    
    if not answers or answers["remote_display"] == "Hu·ª∑":
        return
    
    # Tr√≠ch xu·∫•t t√™n remote t·ª´ chu·ªói hi·ªÉn th·ªã (tr∆∞·ªõc d·∫•u ngo·∫∑c ƒë·∫ßu ti√™n)
    remote_name = answers["remote_display"].split(" (")[0]
    
    # Get path to list
    path_question = [
        inquirer.Text(
            "path",
            message="Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·ªÉ hi·ªÉn th·ªã (m·∫∑c ƒë·ªãnh: backups/):",
            default="backups/"
        ),
    ]
    
    path_answer = inquirer.prompt(path_question)
    
    if not path_answer:
        return
    
    path = path_answer["path"]
    
    # List files in the remote path
    print(f"\n‚è≥ ƒêang li·ªát k√™ t·ªáp tin trong '{remote_name}:{path}'...")
    files = rclone_manager.list_files(remote_name, path)
    
    if files:
        print(f"\nüìã T·ªáp tin trong '{remote_name}:{path}':")
        print("=" * 80)
        print(f"{'T√™n':30} {'K√≠ch th∆∞·ªõc':12} {'Lo·∫°i':12} {'Th·ªùi gian ch·ªânh s·ª≠a'}")
        print("-" * 80)
        
        for file in files:
            name = file.get("Name", "Unknown")
            size = format_size(file.get("Size", 0))
            mod_time = file.get("ModTime", "Unknown")
            file_type = "üìÅ Th∆∞ m·ª•c" if file.get("IsDir", False) else "üìÑ T·ªáp tin"
            
            print(f"{name[:30]:30} {size:12} {file_type:12} {mod_time}")
        
        print("=" * 80)
    else:
        print(f"\n‚ùå Kh√¥ng t√¨m th·∫•y t·ªáp tin n√†o trong '{remote_name}:{path}'.")
    
    input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")