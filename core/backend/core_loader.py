# File: core/backend/core_loader.py

import os
import sys
import subprocess

# ====== Danh s√°ch th∆∞ vi·ªán b·∫Øt bu·ªôc ======
REQUIRED_MODULES = {
    "questionary": "questionary",
    "rich": "rich",
    "json": "json",
    "platform": "platform",
    "subprocess": "subprocess",
    "os": "os",
    "sys": "sys",
}

# ====== Ki·ªÉm tra v√† c·∫≠p nh·∫≠t pip ======
def check_and_update_pip():
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t pip: {e}")
        sys.exit(1)
# ====== C√†i ƒë·∫∑t n·∫øu thi·∫øu module ======
def check_and_install_modules():
    for import_name, pip_name in REQUIRED_MODULES.items():
        try:
            __import__(import_name)
        except ImportError:
            print(f"‚ö†Ô∏è Ch∆∞a t√¨m th·∫•y module: {import_name} ‚Üí ti·∫øn h√†nh c√†i ƒë·∫∑t...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", pip_name])

# ====== Source file core.env v√†o os.environ ======
def source_core_env():
    base_path = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
    env_file = os.path.join(base_path, "core.env")

    if not os.path.isfile(env_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh: {env_file}")
        sys.exit(1)

    with open(env_file) as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith("#") or "=" not in line:
                continue
            key, value = line.split("=", 1)
            os.environ[key.strip()] = value.strip()

# ====== Tr·∫£ to√†n b·ªô bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ source d∆∞·ªõi d·∫°ng dict ======
def load_core_env():
    return dict(os.environ)

# ====== Entry point ======
def init():
    # N·∫øu kh√¥ng trong virtualenv th√¨ t·∫°o
    if sys.base_prefix == sys.prefix:
        venv_path = "/app/.venv"
        if not os.path.isdir(venv_path):
            print("üêç ƒêang t·∫°o virtual environment t·∫°i /app/.venv...")
            subprocess.check_call([sys.executable, "-m", "venv", venv_path])
        print("üöÄ ƒêang kh·ªüi ƒë·ªông l·∫°i script trong virtualenv...")
        venv_python = os.path.join(venv_path, "bin", "python")
        os.execv(venv_python, [venv_python] + sys.argv)

    check_and_update_pip()
    check_and_install_modules()
    source_core_env()
    return load_core_env()