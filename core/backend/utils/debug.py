import os
import sys
import logging
import functools

# ===== T·∫°o logger chu·∫©n cho to√†n h·ªá th·ªëng =====
logger = logging.getLogger("wpdocker")
logger.setLevel(logging.DEBUG if os.environ.get("DEBUG_MODE", "false").lower() == "true" else logging.INFO)

formatter = logging.Formatter(
    "%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%H:%M:%S"
)

stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
logger.addHandler(stream_handler)

# ===== H√†m ti·ªán d·ª•ng ƒë·ªÉ log nhanh =====
def debug(msg):
    logger.debug(f"üêû {msg}")

def info(msg):
    logger.info(f"‚ÑπÔ∏è  {msg}")

def warn(msg):
    logger.warning(f"‚ö†Ô∏è  {msg}")

def error(msg):
    logger.error(f"‚ùå {msg}")

# ===== Decorator ƒë·ªÉ t·ª± log c√°c l·ªùi g·ªçi h√†m =====
def log_call(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        logger.debug(f"üîç CALL {func.__name__}()")
        result = func(*args, **kwargs)
        logger.debug(f"‚úÖ DONE {func.__name__} ‚Üí {result}")
        return result
    return wrapper

# ===== Hook ƒë·ªÉ log c√°c exception ch∆∞a ƒë∆∞·ª£c b·∫Øt =====
def enable_exception_hook():
    def handle_exception(exc_type, exc_value, exc_traceback):
        if issubclass(exc_type, KeyboardInterrupt):
            sys.__excepthook__(exc_type, exc_value, exc_traceback)
            return
        logger.error("‚ùå Uncaught exception", exc_info=(exc_type, exc_value, exc_traceback))
    sys.excepthook = handle_exception