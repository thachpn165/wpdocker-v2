from core.backend.utils.env_utils import env_required, env
import os
import sys
import logging
import functools
import inspect

# ===== L·∫•y bi·∫øn m√¥i tr∆∞·ªùng b·∫Øt bu·ªôc =====
env_required(["DEBUG_MODE"])

# ===== T·∫°o logger chu·∫©n cho to√†n h·ªá th·ªëng =====
logger = logging.getLogger("wpdocker")
logger.setLevel(
    logging.DEBUG if env["DEBUG_MODE"].lower() == "true" else logging.INFO)

# ===== ANSI m√†u =====
RESET = "\033[0m"
BOLD = "\033[1m"
WHITE = "\033[37m"
RED = "\033[31m"
YELLOW = "\033[33m"
GREEN = "\033[32m"
DIM = "\033[2m"
# ===== Format m√†u theo c·∫•p ƒë·ªô =====


class ColorFormatter(logging.Formatter):
    def format(self, record):
        prefix = ""
        msg = record.getMessage()
        if record.levelno == logging.DEBUG:
            prefix = f"{WHITE}"
        elif record.levelno == logging.INFO:
            prefix = f"{BOLD}{WHITE}"
        elif record.levelno == logging.WARNING:
            prefix = f"{BOLD}{YELLOW}"
        elif record.levelno == logging.ERROR:
            prefix = f"{BOLD}{RED}"
        return f"{prefix}{self.formatTime(record, '%H:%M:%S')} [{record.levelname}] {msg}{RESET}"


formatter = ColorFormatter()

stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
logger.addHandler(stream_handler)

# ===== H√†m ti·ªán d·ª•ng ƒë·ªÉ log nhanh =====


def debug(msg):
    logger.debug(f"üêû {msg}")


def info(msg):
    logger.info(f"‚ÑπÔ∏è  {msg}")


def warn(msg):
    logger.warning(f"‚ö†Ô∏è  {msg}")


def error(msg):
    logger.error(f"‚ùå  {msg}")


def success(msg):
    print(f"{GREEN}{BOLD}‚úÖ {msg}{RESET}")

# ===== Decorator ƒë·ªÉ t·ª± log c√°c l·ªùi g·ªçi h√†m =====


def log_call(_func=None, *, log_vars=None):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            frame = inspect.currentframe()
            caller_file = os.path.basename(frame.f_back.f_code.co_filename)
            logger.debug(f"{DIM}CALL {func.__name__}() [{caller_file}]{RESET}")

            result = func(*args, **kwargs)

            # Log th√™m c√°c bi·∫øn c·ª• th·ªÉ n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
            if log_vars and isinstance(result, dict):
                for var_name in log_vars:
                    value = result.get(var_name, "‚ùì not found")
                    logger.debug(f"{DIM}  ‚Ü≥ {var_name} = {value}{RESET}")

            logger.debug(f"{DIM}DONE {func.__name__} ‚Üí {result} [{caller_file}]{RESET}")
            return result
        return wrapper

    # N·∫øu g·ªçi tr·ª±c ti·∫øp @log_call kh√¥ng ƒë·ªëi s·ªë
    if callable(_func):
        return decorator(_func)

    return decorator

# ===== Hook ƒë·ªÉ log c√°c exception ch∆∞a ƒë∆∞·ª£c b·∫Øt =====


def enable_exception_hook():
    def handle_exception(exc_type, exc_value, exc_traceback):
        if issubclass(exc_type, KeyboardInterrupt):
            sys.__excepthook__(exc_type, exc_value, exc_traceback)
            return
        logger.error("Uncaught exception", exc_info=(exc_type, exc_value, exc_traceback))
    sys.excepthook = handle_exception