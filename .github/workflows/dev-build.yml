name: Build Nightly
on:
  push:
    branches: [dev]

# Define required permissions
permissions:
  contents: write  # Needed for creating releases

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install build wheel setuptools semver

      - name: Create nightly package
        run: |
          mkdir -p dist
          
          # Build using package script 
          python src/scripts/build_package.py --channel=nightly
          
          # Also build Python wheel package directly
          python -m build --wheel
          
          # Rename files to have fixed names for downloading
          # Create a copy with fixed name while preserving originals
          find dist -name "*.zip" -type f -exec cp {} dist/wpdocker-nightly-latest.zip \;
          find dist -name "*.whl" -type f -exec cp {} dist/wpdocker-nightly-latest.whl \;
          
          # List all files in dist
          ls -la dist/

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Delete existing nightly release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseTag = 'nightly';
            try {
              // Get the existing release by tag
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: releaseTag
              });

              console.log(`Found existing release with ID: ${release.id}. Deleting the entire release...`);

              // Delete the entire release
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });

              console.log('Existing release deleted successfully.');

              // Also delete the tag so we can recreate it at the current commit
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${releaseTag}`
                });
                console.log(`Tag '${releaseTag}' deleted successfully.`);
              } catch (tagError) {
                console.log(`Note: Tag '${releaseTag}' was already deleted or doesn't exist.`);
              }

            } catch (error) {
              if (error.status === 404) {
                console.log(`No existing release found with tag '${releaseTag}'. Will create a new one.`);
              } else {
                console.error(`Error: ${error.message}`);
              }
            }

      - name: Create nightly release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          name: "Nightly Build - ${{ steps.date.outputs.date }}"
          tag_name: nightly
          prerelease: true
          generate_release_notes: true
          body: |
            ## Automated nightly build from dev branch
            Build date: ${{ steps.date.outputs.date }}
            
            ### Installation Options
            
            #### Option 1: Install from ZIP package (Fixed name for latest build)
            1. Download `wpdocker-nightly-latest.zip`
            2. Extract the archive
            3. Run the installer script:
               ```bash
               ./installers/install.sh
               ```
            
            #### Option 2: Install with pip (Python package)
            ```bash
            pip install wpdocker-nightly-latest.whl
            ```
            
            > Note: This project is designed for Linux and macOS systems only.
            
            #### Direct File Links:
            - Latest ZIP: [wpdocker-nightly-latest.zip](https://github.com/yourusername/wpdocker-v2/releases/download/nightly/wpdocker-nightly-latest.zip)  
            - Latest Wheel: [wpdocker-nightly-latest.whl](https://github.com/yourusername/wpdocker-v2/releases/download/nightly/wpdocker-nightly-latest.whl)