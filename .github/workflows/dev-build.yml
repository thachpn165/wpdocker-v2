name: Build Nightly
on:
  push:
    branches: [dev]

# Define required permissions
permissions:
  contents: write  # Needed for creating releases

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install semver

      - name: Create nightly package
        run: |
          mkdir -p dist
          python src/scripts/build_package.py --channel=nightly
          # Rename the zip file to have a fixed name for downloading
          # The original remains unchanged, create an additional copy with a fixed name
          find dist -name "*.zip" -type f -exec cp {} dist/wpdocker-nightly-latest.zip \;
          ls -la dist/

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: generate_notes
        run: |
          # Lấy commit hash của lần build nightly gần nhất
          PREVIOUS_NIGHTLY=$(git log --tags="nightly" -n 1 --pretty=format:"%H" 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_NIGHTLY" ]; then
            echo "Không tìm thấy build nightly trước đó, sử dụng 20 commit gần nhất"
            COMMITS=$(git log -n 20 --pretty=format:"- %s (%h)" | grep -v "Merge")
          else
            echo "Tìm thấy build nightly trước đó, lấy các commit từ lần đó tới nay"
            COMMITS=$(git log $PREVIOUS_NIGHTLY..HEAD --pretty=format:"- %s (%h)" | grep -v "Merge")

            # Nếu không có commit nào giữa lần build trước và hiện tại
            if [ -z "$COMMITS" ]; then
              echo "Không có commit mới từ lần build trước, sử dụng 10 commit gần nhất"
              COMMITS=$(git log -n 10 --pretty=format:"- %s (%h)" | grep -v "Merge")
            fi
          fi

          # Ghi log để debug
          echo "Các commit sẽ được đưa vào release notes:"
          echo "$COMMITS"

          # Lưu vào output để sử dụng ở bước sau
          {
            echo 'notes<<EOF'
            echo "$COMMITS"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Delete existing nightly release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseTag = 'nightly';
            try {
              // Get the existing release by tag
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: releaseTag
              });

              console.log(`Found existing release with ID: ${release.id}. Deleting the entire release...`);

              // Delete the entire release
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });

              console.log('Existing release deleted successfully.');

              // Also delete the tag so we can recreate it at the current commit
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${releaseTag}`
                });
                console.log(`Tag '${releaseTag}' deleted successfully.`);
              } catch (tagError) {
                console.log(`Note: Tag '${releaseTag}' was already deleted or doesn't exist.`);
              }

            } catch (error) {
              if (error.status === 404) {
                console.log(`No existing release found with tag '${releaseTag}'. Will create a new one.`);
              } else {
                console.error(`Error: ${error.message}`);
              }
            }

      - name: Create nightly release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          name: "Nightly Build - ${{ steps.date.outputs.date }}"
          tag_name: nightly
          prerelease: true
          body: |
            ## Automated nightly build from dev branch
            Build date: ${{ steps.date.outputs.date }}

            ### Tải xuống nhanh
            Sử dụng file `wpdocker-nightly-latest.zip` để luôn nhận bản build mới nhất.

            ## Các thay đổi trong bản build này
            ${{ steps.generate_notes.outputs.notes }}